// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactiveParts(t *testing.T) {
	t.Parallel()

	query := ReactiveParts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactivePartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactivePartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ReactiveParts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactivePartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactivePartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactivePartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactivePartExists(ctx, tx, o.Accession)
	if err != nil {
		t.Errorf("Unable to check if ReactivePart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactivePartExists to return true, but got false.")
	}
}

func testReactivePartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactivePartFound, err := FindReactivePart(ctx, tx, o.Accession)
	if err != nil {
		t.Error(err)
	}

	if reactivePartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactivePartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ReactiveParts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactivePartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ReactiveParts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactivePartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactivePartOne := &ReactivePart{}
	reactivePartTwo := &ReactivePart{}
	if err = randomize.Struct(seed, reactivePartOne, reactivePartDBTypes, false, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}
	if err = randomize.Struct(seed, reactivePartTwo, reactivePartDBTypes, false, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactivePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactivePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReactiveParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactivePartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactivePartOne := &ReactivePart{}
	reactivePartTwo := &ReactivePart{}
	if err = randomize.Struct(seed, reactivePartOne, reactivePartDBTypes, false, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}
	if err = randomize.Struct(seed, reactivePartTwo, reactivePartDBTypes, false, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactivePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactivePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactivePartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func reactivePartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactivePart) error {
	*o = ReactivePart{}
	return nil
}

func testReactivePartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ReactivePart{}
	o := &ReactivePart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactivePartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ReactivePart object: %s", err)
	}

	AddReactivePartHook(boil.BeforeInsertHook, reactivePartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactivePartBeforeInsertHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.AfterInsertHook, reactivePartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactivePartAfterInsertHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.AfterSelectHook, reactivePartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactivePartAfterSelectHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.BeforeUpdateHook, reactivePartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactivePartBeforeUpdateHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.AfterUpdateHook, reactivePartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactivePartAfterUpdateHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.BeforeDeleteHook, reactivePartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactivePartBeforeDeleteHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.AfterDeleteHook, reactivePartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactivePartAfterDeleteHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.BeforeUpsertHook, reactivePartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactivePartBeforeUpsertHooks = []ReactivePartHook{}

	AddReactivePartHook(boil.AfterUpsertHook, reactivePartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactivePartAfterUpsertHooks = []ReactivePartHook{}
}

func testReactivePartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactivePartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactivePartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactivePartToOneCompoundUsingReactivePartCompound(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ReactivePart
	var foreign Compound

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactivePartDBTypes, false, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, compoundDBTypes, true, compoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Compound struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Compound, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactivePartCompound().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactivePartSlice{&local}
	if err = local.L.LoadReactivePartCompound(ctx, tx, false, (*[]*ReactivePart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactivePartCompound == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactivePartCompound = nil
	if err = local.L.LoadReactivePartCompound(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactivePartCompound == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactivePartToOneSetOpCompoundUsingReactivePartCompound(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ReactivePart
	var b, c Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactivePartDBTypes, false, strmangle.SetComplement(reactivePartPrimaryKeyColumns, reactivePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Compound{&b, &c} {
		err = a.SetReactivePartCompound(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactivePartCompound != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReactiveParts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Compound, x.Accession) {
			t.Error("foreign key was wrong value", a.Compound)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Compound))
		reflect.Indirect(reflect.ValueOf(&a.Compound)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Compound, x.Accession) {
			t.Error("foreign key was wrong value", a.Compound, x.Accession)
		}
	}
}

func testReactivePartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactivePartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactivePartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactivePartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReactiveParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactivePartDBTypes = map[string]string{`ID`: `INT`, `Accession`: `TEXT`, `Name`: `TEXT`, `HTMLName`: `TEXT`, `Compound`: `TEXT`}
	_                   = bytes.MinRead
)

func testReactivePartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactivePartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactivePartAllColumns) == len(reactivePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactivePartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactivePartAllColumns) == len(reactivePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReactivePart{}
	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactivePartDBTypes, true, reactivePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactivePartAllColumns, reactivePartPrimaryKeyColumns) {
		fields = reactivePartAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactivePartAllColumns,
			reactivePartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactivePartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactivePartsUpsert(t *testing.T) {
	t.Parallel()
	if len(reactivePartAllColumns) == len(reactivePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ReactivePart{}
	if err = randomize.Struct(seed, &o, reactivePartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReactivePart: %s", err)
	}

	count, err := ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactivePartDBTypes, false, reactivePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactivePart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReactivePart: %s", err)
	}

	count, err = ReactiveParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
