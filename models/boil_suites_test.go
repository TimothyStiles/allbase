// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Chebis", testChebis)
	t.Run("Compounds", testCompounds)
	t.Run("Genbanks", testGenbanks)
	t.Run("Reactions", testReactions)
	t.Run("ReactionParticipants", testReactionParticipants)
	t.Run("Reactionsides", testReactionsides)
	t.Run("ReactionsideReactions", testReactionsideReactions)
	t.Run("ReactiveParts", testReactiveParts)
	t.Run("Seqhashes", testSeqhashes)
	t.Run("Uniprots", testUniprots)
}

func TestDelete(t *testing.T) {
	t.Run("Chebis", testChebisDelete)
	t.Run("Compounds", testCompoundsDelete)
	t.Run("Genbanks", testGenbanksDelete)
	t.Run("Reactions", testReactionsDelete)
	t.Run("ReactionParticipants", testReactionParticipantsDelete)
	t.Run("Reactionsides", testReactionsidesDelete)
	t.Run("ReactionsideReactions", testReactionsideReactionsDelete)
	t.Run("ReactiveParts", testReactivePartsDelete)
	t.Run("Seqhashes", testSeqhashesDelete)
	t.Run("Uniprots", testUniprotsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Chebis", testChebisQueryDeleteAll)
	t.Run("Compounds", testCompoundsQueryDeleteAll)
	t.Run("Genbanks", testGenbanksQueryDeleteAll)
	t.Run("Reactions", testReactionsQueryDeleteAll)
	t.Run("ReactionParticipants", testReactionParticipantsQueryDeleteAll)
	t.Run("Reactionsides", testReactionsidesQueryDeleteAll)
	t.Run("ReactionsideReactions", testReactionsideReactionsQueryDeleteAll)
	t.Run("ReactiveParts", testReactivePartsQueryDeleteAll)
	t.Run("Seqhashes", testSeqhashesQueryDeleteAll)
	t.Run("Uniprots", testUniprotsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Chebis", testChebisSliceDeleteAll)
	t.Run("Compounds", testCompoundsSliceDeleteAll)
	t.Run("Genbanks", testGenbanksSliceDeleteAll)
	t.Run("Reactions", testReactionsSliceDeleteAll)
	t.Run("ReactionParticipants", testReactionParticipantsSliceDeleteAll)
	t.Run("Reactionsides", testReactionsidesSliceDeleteAll)
	t.Run("ReactionsideReactions", testReactionsideReactionsSliceDeleteAll)
	t.Run("ReactiveParts", testReactivePartsSliceDeleteAll)
	t.Run("Seqhashes", testSeqhashesSliceDeleteAll)
	t.Run("Uniprots", testUniprotsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Chebis", testChebisExists)
	t.Run("Compounds", testCompoundsExists)
	t.Run("Genbanks", testGenbanksExists)
	t.Run("Reactions", testReactionsExists)
	t.Run("ReactionParticipants", testReactionParticipantsExists)
	t.Run("Reactionsides", testReactionsidesExists)
	t.Run("ReactionsideReactions", testReactionsideReactionsExists)
	t.Run("ReactiveParts", testReactivePartsExists)
	t.Run("Seqhashes", testSeqhashesExists)
	t.Run("Uniprots", testUniprotsExists)
}

func TestFind(t *testing.T) {
	t.Run("Chebis", testChebisFind)
	t.Run("Compounds", testCompoundsFind)
	t.Run("Genbanks", testGenbanksFind)
	t.Run("Reactions", testReactionsFind)
	t.Run("ReactionParticipants", testReactionParticipantsFind)
	t.Run("Reactionsides", testReactionsidesFind)
	t.Run("ReactionsideReactions", testReactionsideReactionsFind)
	t.Run("ReactiveParts", testReactivePartsFind)
	t.Run("Seqhashes", testSeqhashesFind)
	t.Run("Uniprots", testUniprotsFind)
}

func TestBind(t *testing.T) {
	t.Run("Chebis", testChebisBind)
	t.Run("Compounds", testCompoundsBind)
	t.Run("Genbanks", testGenbanksBind)
	t.Run("Reactions", testReactionsBind)
	t.Run("ReactionParticipants", testReactionParticipantsBind)
	t.Run("Reactionsides", testReactionsidesBind)
	t.Run("ReactionsideReactions", testReactionsideReactionsBind)
	t.Run("ReactiveParts", testReactivePartsBind)
	t.Run("Seqhashes", testSeqhashesBind)
	t.Run("Uniprots", testUniprotsBind)
}

func TestOne(t *testing.T) {
	t.Run("Chebis", testChebisOne)
	t.Run("Compounds", testCompoundsOne)
	t.Run("Genbanks", testGenbanksOne)
	t.Run("Reactions", testReactionsOne)
	t.Run("ReactionParticipants", testReactionParticipantsOne)
	t.Run("Reactionsides", testReactionsidesOne)
	t.Run("ReactionsideReactions", testReactionsideReactionsOne)
	t.Run("ReactiveParts", testReactivePartsOne)
	t.Run("Seqhashes", testSeqhashesOne)
	t.Run("Uniprots", testUniprotsOne)
}

func TestAll(t *testing.T) {
	t.Run("Chebis", testChebisAll)
	t.Run("Compounds", testCompoundsAll)
	t.Run("Genbanks", testGenbanksAll)
	t.Run("Reactions", testReactionsAll)
	t.Run("ReactionParticipants", testReactionParticipantsAll)
	t.Run("Reactionsides", testReactionsidesAll)
	t.Run("ReactionsideReactions", testReactionsideReactionsAll)
	t.Run("ReactiveParts", testReactivePartsAll)
	t.Run("Seqhashes", testSeqhashesAll)
	t.Run("Uniprots", testUniprotsAll)
}

func TestCount(t *testing.T) {
	t.Run("Chebis", testChebisCount)
	t.Run("Compounds", testCompoundsCount)
	t.Run("Genbanks", testGenbanksCount)
	t.Run("Reactions", testReactionsCount)
	t.Run("ReactionParticipants", testReactionParticipantsCount)
	t.Run("Reactionsides", testReactionsidesCount)
	t.Run("ReactionsideReactions", testReactionsideReactionsCount)
	t.Run("ReactiveParts", testReactivePartsCount)
	t.Run("Seqhashes", testSeqhashesCount)
	t.Run("Uniprots", testUniprotsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Chebis", testChebisHooks)
	t.Run("Compounds", testCompoundsHooks)
	t.Run("Genbanks", testGenbanksHooks)
	t.Run("Reactions", testReactionsHooks)
	t.Run("ReactionParticipants", testReactionParticipantsHooks)
	t.Run("Reactionsides", testReactionsidesHooks)
	t.Run("ReactionsideReactions", testReactionsideReactionsHooks)
	t.Run("ReactiveParts", testReactivePartsHooks)
	t.Run("Seqhashes", testSeqhashesHooks)
	t.Run("Uniprots", testUniprotsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Chebis", testChebisInsert)
	t.Run("Chebis", testChebisInsertWhitelist)
	t.Run("Compounds", testCompoundsInsert)
	t.Run("Compounds", testCompoundsInsertWhitelist)
	t.Run("Genbanks", testGenbanksInsert)
	t.Run("Genbanks", testGenbanksInsertWhitelist)
	t.Run("Reactions", testReactionsInsert)
	t.Run("Reactions", testReactionsInsertWhitelist)
	t.Run("ReactionParticipants", testReactionParticipantsInsert)
	t.Run("ReactionParticipants", testReactionParticipantsInsertWhitelist)
	t.Run("Reactionsides", testReactionsidesInsert)
	t.Run("Reactionsides", testReactionsidesInsertWhitelist)
	t.Run("ReactionsideReactions", testReactionsideReactionsInsert)
	t.Run("ReactionsideReactions", testReactionsideReactionsInsertWhitelist)
	t.Run("ReactiveParts", testReactivePartsInsert)
	t.Run("ReactiveParts", testReactivePartsInsertWhitelist)
	t.Run("Seqhashes", testSeqhashesInsert)
	t.Run("Seqhashes", testSeqhashesInsertWhitelist)
	t.Run("Uniprots", testUniprotsInsert)
	t.Run("Uniprots", testUniprotsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChebiToChebiUsingSubclassOfChebi", testChebiToOneChebiUsingSubclassOfChebi)
	t.Run("CompoundToChebiUsingCompoundChebi", testCompoundToOneChebiUsingCompoundChebi)
	t.Run("GenbankToSeqhashUsingGenbankSeqhash", testGenbankToOneSeqhashUsingGenbankSeqhash)
	t.Run("ReactionParticipantToReactionsideUsingReactionParticipantReactionside", testReactionParticipantToOneReactionsideUsingReactionParticipantReactionside)
	t.Run("ReactionParticipantToCompoundUsingReactionParticipantCompound", testReactionParticipantToOneCompoundUsingReactionParticipantCompound)
	t.Run("ReactionsideReactionToReactionsideUsingReactionsideReactionReactionside", testReactionsideReactionToOneReactionsideUsingReactionsideReactionReactionside)
	t.Run("ReactionsideReactionToReactionUsingReactionsideReactionReaction", testReactionsideReactionToOneReactionUsingReactionsideReactionReaction)
	t.Run("ReactivePartToCompoundUsingReactivePartCompound", testReactivePartToOneCompoundUsingReactivePartCompound)
	t.Run("SeqhashToSeqhashUsingTranslationSeqhash", testSeqhashToOneSeqhashUsingTranslationSeqhash)
	t.Run("UniprotToSeqhashUsingUniprotSeqhash", testUniprotToOneSeqhashUsingUniprotSeqhash)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChebiToSubclassOfChebis", testChebiToManySubclassOfChebis)
	t.Run("ChebiToCompounds", testChebiToManyCompounds)
	t.Run("CompoundToReactionParticipants", testCompoundToManyReactionParticipants)
	t.Run("CompoundToReactiveParts", testCompoundToManyReactiveParts)
	t.Run("GenbankToSeqhashes", testGenbankToManySeqhashes)
	t.Run("ReactionToReactionsideReactions", testReactionToManyReactionsideReactions)
	t.Run("ReactionToUniprots", testReactionToManyUniprots)
	t.Run("ReactionsideToReactionParticipants", testReactionsideToManyReactionParticipants)
	t.Run("ReactionsideToReactionsideReactions", testReactionsideToManyReactionsideReactions)
	t.Run("SeqhashToGenbanks", testSeqhashToManyGenbanks)
	t.Run("SeqhashToParentGenbanks", testSeqhashToManyParentGenbanks)
	t.Run("SeqhashToTranslationSeqhashes", testSeqhashToManyTranslationSeqhashes)
	t.Run("SeqhashToUniprots", testSeqhashToManyUniprots)
	t.Run("UniprotToReactions", testUniprotToManyReactions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChebiToChebiUsingSubclassOfChebis", testChebiToOneSetOpChebiUsingSubclassOfChebi)
	t.Run("CompoundToChebiUsingCompounds", testCompoundToOneSetOpChebiUsingCompoundChebi)
	t.Run("GenbankToSeqhashUsingGenbanks", testGenbankToOneSetOpSeqhashUsingGenbankSeqhash)
	t.Run("ReactionParticipantToReactionsideUsingReactionParticipants", testReactionParticipantToOneSetOpReactionsideUsingReactionParticipantReactionside)
	t.Run("ReactionParticipantToCompoundUsingReactionParticipants", testReactionParticipantToOneSetOpCompoundUsingReactionParticipantCompound)
	t.Run("ReactionsideReactionToReactionsideUsingReactionsideReactions", testReactionsideReactionToOneSetOpReactionsideUsingReactionsideReactionReactionside)
	t.Run("ReactionsideReactionToReactionUsingReactionsideReactions", testReactionsideReactionToOneSetOpReactionUsingReactionsideReactionReaction)
	t.Run("ReactivePartToCompoundUsingReactiveParts", testReactivePartToOneSetOpCompoundUsingReactivePartCompound)
	t.Run("SeqhashToSeqhashUsingTranslationSeqhashes", testSeqhashToOneSetOpSeqhashUsingTranslationSeqhash)
	t.Run("UniprotToSeqhashUsingUniprots", testUniprotToOneSetOpSeqhashUsingUniprotSeqhash)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ChebiToChebiUsingSubclassOfChebis", testChebiToOneRemoveOpChebiUsingSubclassOfChebi)
	t.Run("CompoundToChebiUsingCompounds", testCompoundToOneRemoveOpChebiUsingCompoundChebi)
	t.Run("ReactionParticipantToCompoundUsingReactionParticipants", testReactionParticipantToOneRemoveOpCompoundUsingReactionParticipantCompound)
	t.Run("SeqhashToSeqhashUsingTranslationSeqhashes", testSeqhashToOneRemoveOpSeqhashUsingTranslationSeqhash)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChebiToSubclassOfChebis", testChebiToManyAddOpSubclassOfChebis)
	t.Run("ChebiToCompounds", testChebiToManyAddOpCompounds)
	t.Run("CompoundToReactionParticipants", testCompoundToManyAddOpReactionParticipants)
	t.Run("CompoundToReactiveParts", testCompoundToManyAddOpReactiveParts)
	t.Run("GenbankToSeqhashes", testGenbankToManyAddOpSeqhashes)
	t.Run("ReactionToReactionsideReactions", testReactionToManyAddOpReactionsideReactions)
	t.Run("ReactionToUniprots", testReactionToManyAddOpUniprots)
	t.Run("ReactionsideToReactionParticipants", testReactionsideToManyAddOpReactionParticipants)
	t.Run("ReactionsideToReactionsideReactions", testReactionsideToManyAddOpReactionsideReactions)
	t.Run("SeqhashToGenbanks", testSeqhashToManyAddOpGenbanks)
	t.Run("SeqhashToParentGenbanks", testSeqhashToManyAddOpParentGenbanks)
	t.Run("SeqhashToTranslationSeqhashes", testSeqhashToManyAddOpTranslationSeqhashes)
	t.Run("SeqhashToUniprots", testSeqhashToManyAddOpUniprots)
	t.Run("UniprotToReactions", testUniprotToManyAddOpReactions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ChebiToSubclassOfChebis", testChebiToManySetOpSubclassOfChebis)
	t.Run("ChebiToCompounds", testChebiToManySetOpCompounds)
	t.Run("CompoundToReactionParticipants", testCompoundToManySetOpReactionParticipants)
	t.Run("GenbankToSeqhashes", testGenbankToManySetOpSeqhashes)
	t.Run("ReactionToUniprots", testReactionToManySetOpUniprots)
	t.Run("SeqhashToParentGenbanks", testSeqhashToManySetOpParentGenbanks)
	t.Run("SeqhashToTranslationSeqhashes", testSeqhashToManySetOpTranslationSeqhashes)
	t.Run("UniprotToReactions", testUniprotToManySetOpReactions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ChebiToSubclassOfChebis", testChebiToManyRemoveOpSubclassOfChebis)
	t.Run("ChebiToCompounds", testChebiToManyRemoveOpCompounds)
	t.Run("CompoundToReactionParticipants", testCompoundToManyRemoveOpReactionParticipants)
	t.Run("GenbankToSeqhashes", testGenbankToManyRemoveOpSeqhashes)
	t.Run("ReactionToUniprots", testReactionToManyRemoveOpUniprots)
	t.Run("SeqhashToParentGenbanks", testSeqhashToManyRemoveOpParentGenbanks)
	t.Run("SeqhashToTranslationSeqhashes", testSeqhashToManyRemoveOpTranslationSeqhashes)
	t.Run("UniprotToReactions", testUniprotToManyRemoveOpReactions)
}

func TestReload(t *testing.T) {
	t.Run("Chebis", testChebisReload)
	t.Run("Compounds", testCompoundsReload)
	t.Run("Genbanks", testGenbanksReload)
	t.Run("Reactions", testReactionsReload)
	t.Run("ReactionParticipants", testReactionParticipantsReload)
	t.Run("Reactionsides", testReactionsidesReload)
	t.Run("ReactionsideReactions", testReactionsideReactionsReload)
	t.Run("ReactiveParts", testReactivePartsReload)
	t.Run("Seqhashes", testSeqhashesReload)
	t.Run("Uniprots", testUniprotsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Chebis", testChebisReloadAll)
	t.Run("Compounds", testCompoundsReloadAll)
	t.Run("Genbanks", testGenbanksReloadAll)
	t.Run("Reactions", testReactionsReloadAll)
	t.Run("ReactionParticipants", testReactionParticipantsReloadAll)
	t.Run("Reactionsides", testReactionsidesReloadAll)
	t.Run("ReactionsideReactions", testReactionsideReactionsReloadAll)
	t.Run("ReactiveParts", testReactivePartsReloadAll)
	t.Run("Seqhashes", testSeqhashesReloadAll)
	t.Run("Uniprots", testUniprotsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Chebis", testChebisSelect)
	t.Run("Compounds", testCompoundsSelect)
	t.Run("Genbanks", testGenbanksSelect)
	t.Run("Reactions", testReactionsSelect)
	t.Run("ReactionParticipants", testReactionParticipantsSelect)
	t.Run("Reactionsides", testReactionsidesSelect)
	t.Run("ReactionsideReactions", testReactionsideReactionsSelect)
	t.Run("ReactiveParts", testReactivePartsSelect)
	t.Run("Seqhashes", testSeqhashesSelect)
	t.Run("Uniprots", testUniprotsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Chebis", testChebisUpdate)
	t.Run("Compounds", testCompoundsUpdate)
	t.Run("Genbanks", testGenbanksUpdate)
	t.Run("Reactions", testReactionsUpdate)
	t.Run("ReactionParticipants", testReactionParticipantsUpdate)
	t.Run("Reactionsides", testReactionsidesUpdate)
	t.Run("ReactionsideReactions", testReactionsideReactionsUpdate)
	t.Run("ReactiveParts", testReactivePartsUpdate)
	t.Run("Seqhashes", testSeqhashesUpdate)
	t.Run("Uniprots", testUniprotsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Chebis", testChebisSliceUpdateAll)
	t.Run("Compounds", testCompoundsSliceUpdateAll)
	t.Run("Genbanks", testGenbanksSliceUpdateAll)
	t.Run("Reactions", testReactionsSliceUpdateAll)
	t.Run("ReactionParticipants", testReactionParticipantsSliceUpdateAll)
	t.Run("Reactionsides", testReactionsidesSliceUpdateAll)
	t.Run("ReactionsideReactions", testReactionsideReactionsSliceUpdateAll)
	t.Run("ReactiveParts", testReactivePartsSliceUpdateAll)
	t.Run("Seqhashes", testSeqhashesSliceUpdateAll)
	t.Run("Uniprots", testUniprotsSliceUpdateAll)
}
