// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactionsidereactions(t *testing.T) {
	t.Parallel()

	query := Reactionsidereactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactionsidereactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidereactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reactionsidereactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidereactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsidereactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidereactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactionsidereactionExists(ctx, tx, o.Reaction, o.Reactionside)
	if err != nil {
		t.Errorf("Unable to check if Reactionsidereaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactionsidereactionExists to return true, but got false.")
	}
}

func testReactionsidereactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactionsidereactionFound, err := FindReactionsidereaction(ctx, tx, o.Reaction, o.Reactionside)
	if err != nil {
		t.Error(err)
	}

	if reactionsidereactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactionsidereactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reactionsidereactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactionsidereactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reactionsidereactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactionsidereactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactionsidereactionOne := &Reactionsidereaction{}
	reactionsidereactionTwo := &Reactionsidereaction{}
	if err = randomize.Struct(seed, reactionsidereactionOne, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsidereactionTwo, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsidereactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsidereactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionsidereactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactionsidereactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactionsidereactionOne := &Reactionsidereaction{}
	reactionsidereactionTwo := &Reactionsidereaction{}
	if err = randomize.Struct(seed, reactionsidereactionOne, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsidereactionTwo, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsidereactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsidereactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactionsidereactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func reactionsidereactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionsidereaction) error {
	*o = Reactionsidereaction{}
	return nil
}

func testReactionsidereactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reactionsidereaction{}
	o := &Reactionsidereaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction object: %s", err)
	}

	AddReactionsidereactionHook(boil.BeforeInsertHook, reactionsidereactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionBeforeInsertHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.AfterInsertHook, reactionsidereactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionAfterInsertHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.AfterSelectHook, reactionsidereactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionAfterSelectHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.BeforeUpdateHook, reactionsidereactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionBeforeUpdateHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.AfterUpdateHook, reactionsidereactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionAfterUpdateHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.BeforeDeleteHook, reactionsidereactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionBeforeDeleteHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.AfterDeleteHook, reactionsidereactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionAfterDeleteHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.BeforeUpsertHook, reactionsidereactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionBeforeUpsertHooks = []ReactionsidereactionHook{}

	AddReactionsidereactionHook(boil.AfterUpsertHook, reactionsidereactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsidereactionAfterUpsertHooks = []ReactionsidereactionHook{}
}

func testReactionsidereactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsidereactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactionsidereactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsidereactionToOneReactionsideUsingReactionsidereactionReactionside(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reactionsidereaction
	var foreign Reactionside

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Reactionside, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionsidereactionReactionside().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionsidereactionSlice{&local}
	if err = local.L.LoadReactionsidereactionReactionside(ctx, tx, false, (*[]*Reactionsidereaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsidereactionReactionside == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionsidereactionReactionside = nil
	if err = local.L.LoadReactionsidereactionReactionside(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsidereactionReactionside == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionsidereactionToOneReactionUsingReactionsidereactionReaction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reactionsidereaction
	var foreign Reaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionsidereactionDBTypes, false, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Reaction, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionsidereactionReaction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionsidereactionSlice{&local}
	if err = local.L.LoadReactionsidereactionReaction(ctx, tx, false, (*[]*Reactionsidereaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsidereactionReaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionsidereactionReaction = nil
	if err = local.L.LoadReactionsidereactionReaction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsidereactionReaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionsidereactionToOneSetOpReactionsideUsingReactionsidereactionReactionside(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionsidereaction
	var b, c Reactionside

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsidereactionDBTypes, false, strmangle.SetComplement(reactionsidereactionPrimaryKeyColumns, reactionsidereactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reactionside{&b, &c} {
		err = a.SetReactionsidereactionReactionside(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionsidereactionReactionside != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Reactionsidereactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Reactionside, x.Accession) {
			t.Error("foreign key was wrong value", a.Reactionside)
		}

		if exists, err := ReactionsidereactionExists(ctx, tx, a.Reaction, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testReactionsidereactionToOneSetOpReactionUsingReactionsidereactionReaction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionsidereaction
	var b, c Reaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsidereactionDBTypes, false, strmangle.SetComplement(reactionsidereactionPrimaryKeyColumns, reactionsidereactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reactionDBTypes, false, strmangle.SetComplement(reactionPrimaryKeyColumns, reactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionDBTypes, false, strmangle.SetComplement(reactionPrimaryKeyColumns, reactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reaction{&b, &c} {
		err = a.SetReactionsidereactionReaction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionsidereactionReaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Reactionsidereactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Reaction, x.Accession) {
			t.Error("foreign key was wrong value", a.Reaction)
		}

		if exists, err := ReactionsidereactionExists(ctx, tx, a.Reaction, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testReactionsidereactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsidereactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsidereactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsidereactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionsidereactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactionsidereactionDBTypes = map[string]string{`Reaction`: `TEXT`, `Reactionside`: `TEXT`, `Reactionsidereactiontype`: `TEXT`}
	_                           = bytes.MinRead
)

func testReactionsidereactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactionsidereactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactionsidereactionAllColumns) == len(reactionsidereactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactionsidereactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactionsidereactionAllColumns) == len(reactionsidereactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionsidereaction{}
	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsidereactionDBTypes, true, reactionsidereactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactionsidereactionAllColumns, reactionsidereactionPrimaryKeyColumns) {
		fields = reactionsidereactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactionsidereactionAllColumns,
			reactionsidereactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactionsidereactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactionsidereactionsUpsert(t *testing.T) {
	t.Parallel()
	if len(reactionsidereactionAllColumns) == len(reactionsidereactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reactionsidereaction{}
	if err = randomize.Struct(seed, &o, reactionsidereactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionsidereaction: %s", err)
	}

	count, err := Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactionsidereactionDBTypes, false, reactionsidereactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionsidereaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionsidereaction: %s", err)
	}

	count, err = Reactionsidereactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
