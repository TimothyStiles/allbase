// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactionsides(t *testing.T) {
	t.Parallel()

	query := Reactionsides()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactionsidesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reactionsides().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsideSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsidesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactionsideExists(ctx, tx, o.Accession)
	if err != nil {
		t.Errorf("Unable to check if Reactionside exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactionsideExists to return true, but got false.")
	}
}

func testReactionsidesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactionsideFound, err := FindReactionside(ctx, tx, o.Accession)
	if err != nil {
		t.Error(err)
	}

	if reactionsideFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactionsidesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reactionsides().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactionsidesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reactionsides().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactionsidesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactionsideOne := &Reactionside{}
	reactionsideTwo := &Reactionside{}
	if err = randomize.Struct(seed, reactionsideOne, reactionsideDBTypes, false, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsideTwo, reactionsideDBTypes, false, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionsides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactionsidesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactionsideOne := &Reactionside{}
	reactionsideTwo := &Reactionside{}
	if err = randomize.Struct(seed, reactionsideOne, reactionsideDBTypes, false, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsideTwo, reactionsideDBTypes, false, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactionsideBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func reactionsideAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionside) error {
	*o = Reactionside{}
	return nil
}

func testReactionsidesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reactionside{}
	o := &Reactionside{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactionsideDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reactionside object: %s", err)
	}

	AddReactionsideHook(boil.BeforeInsertHook, reactionsideBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactionsideBeforeInsertHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.AfterInsertHook, reactionsideAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactionsideAfterInsertHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.AfterSelectHook, reactionsideAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactionsideAfterSelectHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.BeforeUpdateHook, reactionsideBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsideBeforeUpdateHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.AfterUpdateHook, reactionsideAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsideAfterUpdateHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.BeforeDeleteHook, reactionsideBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsideBeforeDeleteHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.AfterDeleteHook, reactionsideAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsideAfterDeleteHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.BeforeUpsertHook, reactionsideBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsideBeforeUpsertHooks = []ReactionsideHook{}

	AddReactionsideHook(boil.AfterUpsertHook, reactionsideAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsideAfterUpsertHooks = []ReactionsideHook{}
}

func testReactionsidesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsidesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactionsideColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsideToManyReactionParticipants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionside
	var b, c ReactionParticipant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, reactionParticipantDBTypes, false, reactionParticipantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionParticipantDBTypes, false, reactionParticipantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Reactionside, a.Accession)
	queries.Assign(&c.Reactionside, a.Accession)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ReactionParticipants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Reactionside, b.Reactionside) {
			bFound = true
		}
		if queries.Equal(v.Reactionside, c.Reactionside) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ReactionsideSlice{&a}
	if err = a.L.LoadReactionParticipants(ctx, tx, false, (*[]*Reactionside)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReactionParticipants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ReactionParticipants = nil
	if err = a.L.LoadReactionParticipants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReactionParticipants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testReactionsideToManyReactionsideReactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionside
	var b, c ReactionsideReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Reactionside, a.Accession)
	queries.Assign(&c.Reactionside, a.Accession)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ReactionsideReactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Reactionside, b.Reactionside) {
			bFound = true
		}
		if queries.Equal(v.Reactionside, c.Reactionside) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ReactionsideSlice{&a}
	if err = a.L.LoadReactionsideReactions(ctx, tx, false, (*[]*Reactionside)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReactionsideReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ReactionsideReactions = nil
	if err = a.L.LoadReactionsideReactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReactionsideReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testReactionsideToManyAddOpReactionParticipants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionside
	var b, c, d, e ReactionParticipant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ReactionParticipant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, reactionParticipantDBTypes, false, strmangle.SetComplement(reactionParticipantPrimaryKeyColumns, reactionParticipantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ReactionParticipant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReactionParticipants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Accession, first.Reactionside) {
			t.Error("foreign key was wrong value", a.Accession, first.Reactionside)
		}
		if !queries.Equal(a.Accession, second.Reactionside) {
			t.Error("foreign key was wrong value", a.Accession, second.Reactionside)
		}

		if first.R.ReactionParticipantReactionside != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ReactionParticipantReactionside != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ReactionParticipants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ReactionParticipants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ReactionParticipants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testReactionsideToManyAddOpReactionsideReactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionside
	var b, c, d, e ReactionsideReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ReactionsideReaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, reactionsideReactionDBTypes, false, strmangle.SetComplement(reactionsideReactionPrimaryKeyColumns, reactionsideReactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ReactionsideReaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReactionsideReactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Accession, first.Reactionside) {
			t.Error("foreign key was wrong value", a.Accession, first.Reactionside)
		}
		if !queries.Equal(a.Accession, second.Reactionside) {
			t.Error("foreign key was wrong value", a.Accession, second.Reactionside)
		}

		if first.R.ReactionsideReactionReactionside != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ReactionsideReactionReactionside != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ReactionsideReactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ReactionsideReactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ReactionsideReactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testReactionsidesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsidesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsideSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsidesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionsides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactionsideDBTypes = map[string]string{`Accession`: `TEXT`}
	_                   = bytes.MinRead
)

func testReactionsidesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactionsidePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactionsideAllColumns) == len(reactionsidePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsidePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactionsidesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactionsideAllColumns) == len(reactionsidePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionside{}
	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsideDBTypes, true, reactionsidePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactionsideAllColumns, reactionsidePrimaryKeyColumns) {
		fields = reactionsideAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactionsideAllColumns,
			reactionsidePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactionsideSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactionsidesUpsert(t *testing.T) {
	t.Parallel()
	if len(reactionsideAllColumns) == len(reactionsidePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reactionside{}
	if err = randomize.Struct(seed, &o, reactionsideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionside: %s", err)
	}

	count, err := Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactionsideDBTypes, false, reactionsidePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionside: %s", err)
	}

	count, err = Reactionsides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
