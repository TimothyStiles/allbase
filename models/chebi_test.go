// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChebis(t *testing.T) {
	t.Parallel()

	query := Chebis()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChebisDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChebisQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Chebis().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChebisSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChebiSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChebisExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChebiExists(ctx, tx, o.Accession)
	if err != nil {
		t.Errorf("Unable to check if Chebi exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChebiExists to return true, but got false.")
	}
}

func testChebisFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chebiFound, err := FindChebi(ctx, tx, o.Accession)
	if err != nil {
		t.Error(err)
	}

	if chebiFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChebisBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Chebis().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChebisOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Chebis().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChebisAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chebiOne := &Chebi{}
	chebiTwo := &Chebi{}
	if err = randomize.Struct(seed, chebiOne, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}
	if err = randomize.Struct(seed, chebiTwo, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chebiOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chebiTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chebis().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChebisCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chebiOne := &Chebi{}
	chebiTwo := &Chebi{}
	if err = randomize.Struct(seed, chebiOne, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}
	if err = randomize.Struct(seed, chebiTwo, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chebiOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chebiTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chebiBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func chebiAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Chebi) error {
	*o = Chebi{}
	return nil
}

func testChebisHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Chebi{}
	o := &Chebi{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chebiDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Chebi object: %s", err)
	}

	AddChebiHook(boil.BeforeInsertHook, chebiBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chebiBeforeInsertHooks = []ChebiHook{}

	AddChebiHook(boil.AfterInsertHook, chebiAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chebiAfterInsertHooks = []ChebiHook{}

	AddChebiHook(boil.AfterSelectHook, chebiAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chebiAfterSelectHooks = []ChebiHook{}

	AddChebiHook(boil.BeforeUpdateHook, chebiBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chebiBeforeUpdateHooks = []ChebiHook{}

	AddChebiHook(boil.AfterUpdateHook, chebiAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chebiAfterUpdateHooks = []ChebiHook{}

	AddChebiHook(boil.BeforeDeleteHook, chebiBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chebiBeforeDeleteHooks = []ChebiHook{}

	AddChebiHook(boil.AfterDeleteHook, chebiAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chebiAfterDeleteHooks = []ChebiHook{}

	AddChebiHook(boil.BeforeUpsertHook, chebiBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chebiBeforeUpsertHooks = []ChebiHook{}

	AddChebiHook(boil.AfterUpsertHook, chebiAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chebiAfterUpsertHooks = []ChebiHook{}
}

func testChebisInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChebisInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chebiColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChebiToManySubclassofChebis(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chebiDBTypes, false, chebiColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Subclassof, a.Accession)
	queries.Assign(&c.Subclassof, a.Accession)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SubclassofChebis().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Subclassof, b.Subclassof) {
			bFound = true
		}
		if queries.Equal(v.Subclassof, c.Subclassof) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChebiSlice{&a}
	if err = a.L.LoadSubclassofChebis(ctx, tx, false, (*[]*Chebi)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SubclassofChebis); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SubclassofChebis = nil
	if err = a.L.LoadSubclassofChebis(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SubclassofChebis); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChebiToManyCompounds(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, compoundDBTypes, false, compoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, compoundDBTypes, false, compoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Chebi, a.Accession)
	queries.Assign(&c.Chebi, a.Accession)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Compounds().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Chebi, b.Chebi) {
			bFound = true
		}
		if queries.Equal(v.Chebi, c.Chebi) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChebiSlice{&a}
	if err = a.L.LoadCompounds(ctx, tx, false, (*[]*Chebi)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Compounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Compounds = nil
	if err = a.L.LoadCompounds(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Compounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChebiToManyAddOpSubclassofChebis(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chebi{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Chebi{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSubclassofChebis(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Accession, first.Subclassof) {
			t.Error("foreign key was wrong value", a.Accession, first.Subclassof)
		}
		if !queries.Equal(a.Accession, second.Subclassof) {
			t.Error("foreign key was wrong value", a.Accession, second.Subclassof)
		}

		if first.R.SubclassofChebi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SubclassofChebi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SubclassofChebis[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SubclassofChebis[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SubclassofChebis().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChebiToManySetOpSubclassofChebis(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chebi{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSubclassofChebis(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SubclassofChebis().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSubclassofChebis(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SubclassofChebis().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Subclassof) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Subclassof) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Accession, d.Subclassof) {
		t.Error("foreign key was wrong value", a.Accession, d.Subclassof)
	}
	if !queries.Equal(a.Accession, e.Subclassof) {
		t.Error("foreign key was wrong value", a.Accession, e.Subclassof)
	}

	if b.R.SubclassofChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SubclassofChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SubclassofChebi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SubclassofChebi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SubclassofChebis[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SubclassofChebis[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChebiToManyRemoveOpSubclassofChebis(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chebi{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSubclassofChebis(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SubclassofChebis().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSubclassofChebis(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SubclassofChebis().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Subclassof) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Subclassof) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SubclassofChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SubclassofChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SubclassofChebi != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SubclassofChebi != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SubclassofChebis) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SubclassofChebis[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SubclassofChebis[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChebiToManyAddOpCompounds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Compound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Compound{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompounds(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Accession, first.Chebi) {
			t.Error("foreign key was wrong value", a.Accession, first.Chebi)
		}
		if !queries.Equal(a.Accession, second.Chebi) {
			t.Error("foreign key was wrong value", a.Accession, second.Chebi)
		}

		if first.R.CompoundChebi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CompoundChebi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Compounds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Compounds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Compounds().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChebiToManySetOpCompounds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Compound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCompounds(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Compounds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCompounds(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Compounds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Chebi) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Chebi) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Accession, d.Chebi) {
		t.Error("foreign key was wrong value", a.Accession, d.Chebi)
	}
	if !queries.Equal(a.Accession, e.Chebi) {
		t.Error("foreign key was wrong value", a.Accession, e.Chebi)
	}

	if b.R.CompoundChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CompoundChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CompoundChebi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CompoundChebi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Compounds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Compounds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChebiToManyRemoveOpCompounds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c, d, e Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Compound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCompounds(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Compounds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCompounds(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Compounds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Chebi) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Chebi) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CompoundChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CompoundChebi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CompoundChebi != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CompoundChebi != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Compounds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Compounds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Compounds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChebiToOneChebiUsingSubclassofChebi(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Chebi
	var foreign Chebi

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Subclassof, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SubclassofChebi().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ChebiSlice{&local}
	if err = local.L.LoadSubclassofChebi(ctx, tx, false, (*[]*Chebi)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SubclassofChebi == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SubclassofChebi = nil
	if err = local.L.LoadSubclassofChebi(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SubclassofChebi == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChebiToOneSetOpChebiUsingSubclassofChebi(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b, c Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chebi{&b, &c} {
		err = a.SetSubclassofChebi(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SubclassofChebi != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SubclassofChebis[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Subclassof, x.Accession) {
			t.Error("foreign key was wrong value", a.Subclassof)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Subclassof))
		reflect.Indirect(reflect.ValueOf(&a.Subclassof)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Subclassof, x.Accession) {
			t.Error("foreign key was wrong value", a.Subclassof, x.Accession)
		}
	}
}

func testChebiToOneRemoveOpChebiUsingSubclassofChebi(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chebi
	var b Chebi

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chebiDBTypes, false, strmangle.SetComplement(chebiPrimaryKeyColumns, chebiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSubclassofChebi(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSubclassofChebi(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SubclassofChebi().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SubclassofChebi != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Subclassof) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SubclassofChebis) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testChebisReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChebisReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChebiSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChebisSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chebis().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chebiDBTypes = map[string]string{`Accession`: `TEXT`, `Subclassof`: `TEXT`}
	_            = bytes.MinRead
)

func testChebisUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chebiPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chebiAllColumns) == len(chebiPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChebisSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chebiAllColumns) == len(chebiPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chebi{}
	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chebiDBTypes, true, chebiPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chebiAllColumns, chebiPrimaryKeyColumns) {
		fields = chebiAllColumns
	} else {
		fields = strmangle.SetComplement(
			chebiAllColumns,
			chebiPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChebiSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChebisUpsert(t *testing.T) {
	t.Parallel()
	if len(chebiAllColumns) == len(chebiPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Chebi{}
	if err = randomize.Struct(seed, &o, chebiDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chebi: %s", err)
	}

	count, err := Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chebiDBTypes, false, chebiPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chebi struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chebi: %s", err)
	}

	count, err = Chebis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
