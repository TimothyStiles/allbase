// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactionparticipants(t *testing.T) {
	t.Parallel()

	query := Reactionparticipants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactionparticipantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionparticipantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reactionparticipants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionparticipantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionparticipantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionparticipantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactionparticipantExists(ctx, tx, o.Compound, o.Reactionside)
	if err != nil {
		t.Errorf("Unable to check if Reactionparticipant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactionparticipantExists to return true, but got false.")
	}
}

func testReactionparticipantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactionparticipantFound, err := FindReactionparticipant(ctx, tx, o.Compound, o.Reactionside)
	if err != nil {
		t.Error(err)
	}

	if reactionparticipantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactionparticipantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reactionparticipants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactionparticipantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reactionparticipants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactionparticipantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactionparticipantOne := &Reactionparticipant{}
	reactionparticipantTwo := &Reactionparticipant{}
	if err = randomize.Struct(seed, reactionparticipantOne, reactionparticipantDBTypes, false, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionparticipantTwo, reactionparticipantDBTypes, false, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionparticipantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionparticipantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionparticipants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactionparticipantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactionparticipantOne := &Reactionparticipant{}
	reactionparticipantTwo := &Reactionparticipant{}
	if err = randomize.Struct(seed, reactionparticipantOne, reactionparticipantDBTypes, false, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionparticipantTwo, reactionparticipantDBTypes, false, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionparticipantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionparticipantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactionparticipantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func reactionparticipantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reactionparticipant) error {
	*o = Reactionparticipant{}
	return nil
}

func testReactionparticipantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reactionparticipant{}
	o := &Reactionparticipant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant object: %s", err)
	}

	AddReactionparticipantHook(boil.BeforeInsertHook, reactionparticipantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactionparticipantBeforeInsertHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.AfterInsertHook, reactionparticipantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactionparticipantAfterInsertHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.AfterSelectHook, reactionparticipantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactionparticipantAfterSelectHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.BeforeUpdateHook, reactionparticipantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactionparticipantBeforeUpdateHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.AfterUpdateHook, reactionparticipantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactionparticipantAfterUpdateHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.BeforeDeleteHook, reactionparticipantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactionparticipantBeforeDeleteHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.AfterDeleteHook, reactionparticipantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactionparticipantAfterDeleteHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.BeforeUpsertHook, reactionparticipantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactionparticipantBeforeUpsertHooks = []ReactionparticipantHook{}

	AddReactionparticipantHook(boil.AfterUpsertHook, reactionparticipantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactionparticipantAfterUpsertHooks = []ReactionparticipantHook{}
}

func testReactionparticipantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionparticipantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactionparticipantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionparticipantToOneReactionsideUsingReactionparticipantReactionside(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reactionparticipant
	var foreign Reactionside

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionparticipantDBTypes, false, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Reactionside, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionparticipantReactionside().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionparticipantSlice{&local}
	if err = local.L.LoadReactionparticipantReactionside(ctx, tx, false, (*[]*Reactionparticipant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionparticipantReactionside == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionparticipantReactionside = nil
	if err = local.L.LoadReactionparticipantReactionside(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionparticipantReactionside == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionparticipantToOneCompoundUsingReactionparticipantCompound(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reactionparticipant
	var foreign Compound

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, compoundDBTypes, true, compoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Compound struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Compound, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionparticipantCompound().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionparticipantSlice{&local}
	if err = local.L.LoadReactionparticipantCompound(ctx, tx, false, (*[]*Reactionparticipant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionparticipantCompound == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionparticipantCompound = nil
	if err = local.L.LoadReactionparticipantCompound(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionparticipantCompound == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionparticipantToOneSetOpReactionsideUsingReactionparticipantReactionside(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionparticipant
	var b, c Reactionside

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionparticipantDBTypes, false, strmangle.SetComplement(reactionparticipantPrimaryKeyColumns, reactionparticipantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reactionside{&b, &c} {
		err = a.SetReactionparticipantReactionside(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionparticipantReactionside != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Reactionparticipants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Reactionside, x.Accession) {
			t.Error("foreign key was wrong value", a.Reactionside)
		}

		if exists, err := ReactionparticipantExists(ctx, tx, a.Compound, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testReactionparticipantToOneSetOpCompoundUsingReactionparticipantCompound(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionparticipant
	var b, c Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionparticipantDBTypes, false, strmangle.SetComplement(reactionparticipantPrimaryKeyColumns, reactionparticipantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Compound{&b, &c} {
		err = a.SetReactionparticipantCompound(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionparticipantCompound != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Reactionparticipants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Compound, x.Accession) {
			t.Error("foreign key was wrong value", a.Compound)
		}

		if exists, err := ReactionparticipantExists(ctx, tx, a.Compound, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testReactionparticipantToOneRemoveOpCompoundUsingReactionparticipantCompound(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reactionparticipant
	var b Compound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionparticipantDBTypes, false, strmangle.SetComplement(reactionparticipantPrimaryKeyColumns, reactionparticipantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, compoundDBTypes, false, strmangle.SetComplement(compoundPrimaryKeyColumns, compoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetReactionparticipantCompound(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveReactionparticipantCompound(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ReactionparticipantCompound().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ReactionparticipantCompound != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Compound) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Reactionparticipants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testReactionparticipantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionparticipantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionparticipantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionparticipantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactionparticipants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactionparticipantDBTypes = map[string]string{`Compound`: `TEXT`, `Reactionside`: `TEXT`, `Contains`: `INT`, `Containsn`: `BOOL`, `Minus`: `BOOL`, `Plus`: `BOOL`}
	_                          = bytes.MinRead
)

func testReactionparticipantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactionparticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactionparticipantAllColumns) == len(reactionparticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactionparticipantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactionparticipantAllColumns) == len(reactionparticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reactionparticipant{}
	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionparticipantDBTypes, true, reactionparticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactionparticipantAllColumns, reactionparticipantPrimaryKeyColumns) {
		fields = reactionparticipantAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactionparticipantAllColumns,
			reactionparticipantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactionparticipantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactionparticipantsUpsert(t *testing.T) {
	t.Parallel()
	if len(reactionparticipantAllColumns) == len(reactionparticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reactionparticipant{}
	if err = randomize.Struct(seed, &o, reactionparticipantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionparticipant: %s", err)
	}

	count, err := Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactionparticipantDBTypes, false, reactionparticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reactionparticipant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reactionparticipant: %s", err)
	}

	count, err = Reactionparticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
