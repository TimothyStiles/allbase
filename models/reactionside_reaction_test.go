// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactionsideReactions(t *testing.T) {
	t.Parallel()

	query := ReactionsideReactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactionsideReactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsideReactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ReactionsideReactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsideReactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsideReactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsideReactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactionsideReactionExists(ctx, tx, o.Reaction, o.Reactionside)
	if err != nil {
		t.Errorf("Unable to check if ReactionsideReaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactionsideReactionExists to return true, but got false.")
	}
}

func testReactionsideReactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactionsideReactionFound, err := FindReactionsideReaction(ctx, tx, o.Reaction, o.Reactionside)
	if err != nil {
		t.Error(err)
	}

	if reactionsideReactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactionsideReactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ReactionsideReactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactionsideReactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ReactionsideReactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactionsideReactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactionsideReactionOne := &ReactionsideReaction{}
	reactionsideReactionTwo := &ReactionsideReaction{}
	if err = randomize.Struct(seed, reactionsideReactionOne, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsideReactionTwo, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsideReactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsideReactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReactionsideReactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactionsideReactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactionsideReactionOne := &ReactionsideReaction{}
	reactionsideReactionTwo := &ReactionsideReaction{}
	if err = randomize.Struct(seed, reactionsideReactionOne, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionsideReactionTwo, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionsideReactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionsideReactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactionsideReactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func reactionsideReactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReactionsideReaction) error {
	*o = ReactionsideReaction{}
	return nil
}

func testReactionsideReactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ReactionsideReaction{}
	o := &ReactionsideReaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction object: %s", err)
	}

	AddReactionsideReactionHook(boil.BeforeInsertHook, reactionsideReactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionBeforeInsertHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.AfterInsertHook, reactionsideReactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionAfterInsertHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.AfterSelectHook, reactionsideReactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionAfterSelectHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.BeforeUpdateHook, reactionsideReactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionBeforeUpdateHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.AfterUpdateHook, reactionsideReactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionAfterUpdateHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.BeforeDeleteHook, reactionsideReactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionBeforeDeleteHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.AfterDeleteHook, reactionsideReactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionAfterDeleteHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.BeforeUpsertHook, reactionsideReactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionBeforeUpsertHooks = []ReactionsideReactionHook{}

	AddReactionsideReactionHook(boil.AfterUpsertHook, reactionsideReactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactionsideReactionAfterUpsertHooks = []ReactionsideReactionHook{}
}

func testReactionsideReactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsideReactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactionsideReactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsideReactionToOneReactionsideUsingReactionsideReactionReactionside(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ReactionsideReaction
	var foreign Reactionside

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reactionsideDBTypes, true, reactionsideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reactionside struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Reactionside, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionsideReactionReactionside().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionsideReactionSlice{&local}
	if err = local.L.LoadReactionsideReactionReactionside(ctx, tx, false, (*[]*ReactionsideReaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsideReactionReactionside == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionsideReactionReactionside = nil
	if err = local.L.LoadReactionsideReactionReactionside(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsideReactionReactionside == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionsideReactionToOneReactionUsingReactionsideReactionReaction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ReactionsideReaction
	var foreign Reaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reactionsideReactionDBTypes, false, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Reaction, foreign.Accession)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReactionsideReactionReaction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Accession, foreign.Accession) {
		t.Errorf("want: %v, got %v", foreign.Accession, check.Accession)
	}

	slice := ReactionsideReactionSlice{&local}
	if err = local.L.LoadReactionsideReactionReaction(ctx, tx, false, (*[]*ReactionsideReaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsideReactionReaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReactionsideReactionReaction = nil
	if err = local.L.LoadReactionsideReactionReaction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReactionsideReactionReaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testReactionsideReactionToOneSetOpReactionsideUsingReactionsideReactionReactionside(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ReactionsideReaction
	var b, c Reactionside

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideReactionDBTypes, false, strmangle.SetComplement(reactionsideReactionPrimaryKeyColumns, reactionsideReactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionsideDBTypes, false, strmangle.SetComplement(reactionsidePrimaryKeyColumns, reactionsideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reactionside{&b, &c} {
		err = a.SetReactionsideReactionReactionside(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionsideReactionReactionside != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReactionsideReactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Reactionside, x.Accession) {
			t.Error("foreign key was wrong value", a.Reactionside)
		}

		if exists, err := ReactionsideReactionExists(ctx, tx, a.Reaction, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testReactionsideReactionToOneSetOpReactionUsingReactionsideReactionReaction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ReactionsideReaction
	var b, c Reaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reactionsideReactionDBTypes, false, strmangle.SetComplement(reactionsideReactionPrimaryKeyColumns, reactionsideReactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reactionDBTypes, false, strmangle.SetComplement(reactionPrimaryKeyColumns, reactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reactionDBTypes, false, strmangle.SetComplement(reactionPrimaryKeyColumns, reactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reaction{&b, &c} {
		err = a.SetReactionsideReactionReaction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReactionsideReactionReaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReactionsideReactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Reaction, x.Accession) {
			t.Error("foreign key was wrong value", a.Reaction)
		}

		if exists, err := ReactionsideReactionExists(ctx, tx, a.Reaction, a.Reactionside); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testReactionsideReactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsideReactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionsideReactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsideReactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReactionsideReactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactionsideReactionDBTypes = map[string]string{`Reaction`: `TEXT`, `Reactionside`: `TEXT`, `ReactionsideReactionType`: `TEXT`}
	_                           = bytes.MinRead
)

func testReactionsideReactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactionsideReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactionsideReactionAllColumns) == len(reactionsideReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactionsideReactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactionsideReactionAllColumns) == len(reactionsideReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReactionsideReaction{}
	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionsideReactionDBTypes, true, reactionsideReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactionsideReactionAllColumns, reactionsideReactionPrimaryKeyColumns) {
		fields = reactionsideReactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactionsideReactionAllColumns,
			reactionsideReactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactionsideReactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactionsideReactionsUpsert(t *testing.T) {
	t.Parallel()
	if len(reactionsideReactionAllColumns) == len(reactionsideReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ReactionsideReaction{}
	if err = randomize.Struct(seed, &o, reactionsideReactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReactionsideReaction: %s", err)
	}

	count, err := ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactionsideReactionDBTypes, false, reactionsideReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReactionsideReaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReactionsideReaction: %s", err)
	}

	count, err = ReactionsideReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
