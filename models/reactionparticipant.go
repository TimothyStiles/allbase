// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reactionparticipant is an object representing the database table.
type Reactionparticipant struct {
	Compound     null.String `boil:"compound" json:"compound,omitempty" toml:"compound" yaml:"compound,omitempty"`
	Reactionside string      `boil:"reactionside" json:"reactionside" toml:"reactionside" yaml:"reactionside"`
	Contains     null.Int64  `boil:"contains" json:"contains,omitempty" toml:"contains" yaml:"contains,omitempty"`
	Containsn    string      `boil:"containsn" json:"containsn" toml:"containsn" yaml:"containsn"`
	Minus        string      `boil:"minus" json:"minus" toml:"minus" yaml:"minus"`
	Plus         string      `boil:"plus" json:"plus" toml:"plus" yaml:"plus"`

	R *reactionparticipantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionparticipantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionparticipantColumns = struct {
	Compound     string
	Reactionside string
	Contains     string
	Containsn    string
	Minus        string
	Plus         string
}{
	Compound:     "compound",
	Reactionside: "reactionside",
	Contains:     "contains",
	Containsn:    "containsn",
	Minus:        "minus",
	Plus:         "plus",
}

var ReactionparticipantTableColumns = struct {
	Compound     string
	Reactionside string
	Contains     string
	Containsn    string
	Minus        string
	Plus         string
}{
	Compound:     "reactionparticipant.compound",
	Reactionside: "reactionparticipant.reactionside",
	Contains:     "reactionparticipant.contains",
	Containsn:    "reactionparticipant.containsn",
	Minus:        "reactionparticipant.minus",
	Plus:         "reactionparticipant.plus",
}

// Generated where

var ReactionparticipantWhere = struct {
	Compound     whereHelpernull_String
	Reactionside whereHelperstring
	Contains     whereHelpernull_Int64
	Containsn    whereHelperstring
	Minus        whereHelperstring
	Plus         whereHelperstring
}{
	Compound:     whereHelpernull_String{field: "\"reactionparticipant\".\"compound\""},
	Reactionside: whereHelperstring{field: "\"reactionparticipant\".\"reactionside\""},
	Contains:     whereHelpernull_Int64{field: "\"reactionparticipant\".\"contains\""},
	Containsn:    whereHelperstring{field: "\"reactionparticipant\".\"containsn\""},
	Minus:        whereHelperstring{field: "\"reactionparticipant\".\"minus\""},
	Plus:         whereHelperstring{field: "\"reactionparticipant\".\"plus\""},
}

// ReactionparticipantRels is where relationship names are stored.
var ReactionparticipantRels = struct {
	ReactionparticipantReactionside string
	ReactionparticipantCompound     string
}{
	ReactionparticipantReactionside: "ReactionparticipantReactionside",
	ReactionparticipantCompound:     "ReactionparticipantCompound",
}

// reactionparticipantR is where relationships are stored.
type reactionparticipantR struct {
	ReactionparticipantReactionside *Reactionside `boil:"ReactionparticipantReactionside" json:"ReactionparticipantReactionside" toml:"ReactionparticipantReactionside" yaml:"ReactionparticipantReactionside"`
	ReactionparticipantCompound     *Compound     `boil:"ReactionparticipantCompound" json:"ReactionparticipantCompound" toml:"ReactionparticipantCompound" yaml:"ReactionparticipantCompound"`
}

// NewStruct creates a new relationship struct
func (*reactionparticipantR) NewStruct() *reactionparticipantR {
	return &reactionparticipantR{}
}

func (r *reactionparticipantR) GetReactionparticipantReactionside() *Reactionside {
	if r == nil {
		return nil
	}
	return r.ReactionparticipantReactionside
}

func (r *reactionparticipantR) GetReactionparticipantCompound() *Compound {
	if r == nil {
		return nil
	}
	return r.ReactionparticipantCompound
}

// reactionparticipantL is where Load methods for each relationship are stored.
type reactionparticipantL struct{}

var (
	reactionparticipantAllColumns            = []string{"compound", "reactionside", "contains", "containsn", "minus", "plus"}
	reactionparticipantColumnsWithoutDefault = []string{"reactionside"}
	reactionparticipantColumnsWithDefault    = []string{"compound", "contains", "containsn", "minus", "plus"}
	reactionparticipantPrimaryKeyColumns     = []string{"compound", "reactionside"}
	reactionparticipantGeneratedColumns      = []string{}
)

type (
	// ReactionparticipantSlice is an alias for a slice of pointers to Reactionparticipant.
	// This should almost always be used instead of []Reactionparticipant.
	ReactionparticipantSlice []*Reactionparticipant
	// ReactionparticipantHook is the signature for custom Reactionparticipant hook methods
	ReactionparticipantHook func(context.Context, boil.ContextExecutor, *Reactionparticipant) error

	reactionparticipantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionparticipantType                 = reflect.TypeOf(&Reactionparticipant{})
	reactionparticipantMapping              = queries.MakeStructMapping(reactionparticipantType)
	reactionparticipantPrimaryKeyMapping, _ = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, reactionparticipantPrimaryKeyColumns)
	reactionparticipantInsertCacheMut       sync.RWMutex
	reactionparticipantInsertCache          = make(map[string]insertCache)
	reactionparticipantUpdateCacheMut       sync.RWMutex
	reactionparticipantUpdateCache          = make(map[string]updateCache)
	reactionparticipantUpsertCacheMut       sync.RWMutex
	reactionparticipantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionparticipantAfterSelectHooks []ReactionparticipantHook

var reactionparticipantBeforeInsertHooks []ReactionparticipantHook
var reactionparticipantAfterInsertHooks []ReactionparticipantHook

var reactionparticipantBeforeUpdateHooks []ReactionparticipantHook
var reactionparticipantAfterUpdateHooks []ReactionparticipantHook

var reactionparticipantBeforeDeleteHooks []ReactionparticipantHook
var reactionparticipantAfterDeleteHooks []ReactionparticipantHook

var reactionparticipantBeforeUpsertHooks []ReactionparticipantHook
var reactionparticipantAfterUpsertHooks []ReactionparticipantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reactionparticipant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reactionparticipant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reactionparticipant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reactionparticipant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reactionparticipant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reactionparticipant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reactionparticipant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reactionparticipant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reactionparticipant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionparticipantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionparticipantHook registers your hook function for all future operations.
func AddReactionparticipantHook(hookPoint boil.HookPoint, reactionparticipantHook ReactionparticipantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionparticipantAfterSelectHooks = append(reactionparticipantAfterSelectHooks, reactionparticipantHook)
	case boil.BeforeInsertHook:
		reactionparticipantBeforeInsertHooks = append(reactionparticipantBeforeInsertHooks, reactionparticipantHook)
	case boil.AfterInsertHook:
		reactionparticipantAfterInsertHooks = append(reactionparticipantAfterInsertHooks, reactionparticipantHook)
	case boil.BeforeUpdateHook:
		reactionparticipantBeforeUpdateHooks = append(reactionparticipantBeforeUpdateHooks, reactionparticipantHook)
	case boil.AfterUpdateHook:
		reactionparticipantAfterUpdateHooks = append(reactionparticipantAfterUpdateHooks, reactionparticipantHook)
	case boil.BeforeDeleteHook:
		reactionparticipantBeforeDeleteHooks = append(reactionparticipantBeforeDeleteHooks, reactionparticipantHook)
	case boil.AfterDeleteHook:
		reactionparticipantAfterDeleteHooks = append(reactionparticipantAfterDeleteHooks, reactionparticipantHook)
	case boil.BeforeUpsertHook:
		reactionparticipantBeforeUpsertHooks = append(reactionparticipantBeforeUpsertHooks, reactionparticipantHook)
	case boil.AfterUpsertHook:
		reactionparticipantAfterUpsertHooks = append(reactionparticipantAfterUpsertHooks, reactionparticipantHook)
	}
}

// One returns a single reactionparticipant record from the query.
func (q reactionparticipantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reactionparticipant, error) {
	o := &Reactionparticipant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reactionparticipant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reactionparticipant records from the query.
func (q reactionparticipantQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionparticipantSlice, error) {
	var o []*Reactionparticipant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reactionparticipant slice")
	}

	if len(reactionparticipantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reactionparticipant records in the query.
func (q reactionparticipantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reactionparticipant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactionparticipantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reactionparticipant exists")
	}

	return count > 0, nil
}

// ReactionparticipantReactionside pointed to by the foreign key.
func (o *Reactionparticipant) ReactionparticipantReactionside(mods ...qm.QueryMod) reactionsideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Reactionside),
	}

	queryMods = append(queryMods, mods...)

	return Reactionsides(queryMods...)
}

// ReactionparticipantCompound pointed to by the foreign key.
func (o *Reactionparticipant) ReactionparticipantCompound(mods ...qm.QueryMod) compoundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Compound),
	}

	queryMods = append(queryMods, mods...)

	return Compounds(queryMods...)
}

// LoadReactionparticipantReactionside allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionparticipantL) LoadReactionparticipantReactionside(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionparticipant interface{}, mods queries.Applicator) error {
	var slice []*Reactionparticipant
	var object *Reactionparticipant

	if singular {
		object = maybeReactionparticipant.(*Reactionparticipant)
	} else {
		slice = *maybeReactionparticipant.(*[]*Reactionparticipant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionparticipantR{}
		}
		if !queries.IsNil(object.Reactionside) {
			args = append(args, object.Reactionside)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionparticipantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Reactionside) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Reactionside) {
				args = append(args, obj.Reactionside)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionside`),
		qm.WhereIn(`reactionside.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reactionside")
	}

	var resultSlice []*Reactionside
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reactionside")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reactionside")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionside")
	}

	if len(reactionparticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionparticipantReactionside = foreign
		if foreign.R == nil {
			foreign.R = &reactionsideR{}
		}
		foreign.R.Reactionparticipants = append(foreign.R.Reactionparticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Reactionside, foreign.Accession) {
				local.R.ReactionparticipantReactionside = foreign
				if foreign.R == nil {
					foreign.R = &reactionsideR{}
				}
				foreign.R.Reactionparticipants = append(foreign.R.Reactionparticipants, local)
				break
			}
		}
	}

	return nil
}

// LoadReactionparticipantCompound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionparticipantL) LoadReactionparticipantCompound(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionparticipant interface{}, mods queries.Applicator) error {
	var slice []*Reactionparticipant
	var object *Reactionparticipant

	if singular {
		object = maybeReactionparticipant.(*Reactionparticipant)
	} else {
		slice = *maybeReactionparticipant.(*[]*Reactionparticipant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionparticipantR{}
		}
		if !queries.IsNil(object.Compound) {
			args = append(args, object.Compound)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionparticipantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Compound) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Compound) {
				args = append(args, obj.Compound)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound`),
		qm.WhereIn(`compound.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Compound")
	}

	var resultSlice []*Compound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Compound")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound")
	}

	if len(reactionparticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionparticipantCompound = foreign
		if foreign.R == nil {
			foreign.R = &compoundR{}
		}
		foreign.R.Reactionparticipants = append(foreign.R.Reactionparticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Compound, foreign.Accession) {
				local.R.ReactionparticipantCompound = foreign
				if foreign.R == nil {
					foreign.R = &compoundR{}
				}
				foreign.R.Reactionparticipants = append(foreign.R.Reactionparticipants, local)
				break
			}
		}
	}

	return nil
}

// SetReactionparticipantReactionside of the reactionparticipant to the related item.
// Sets o.R.ReactionparticipantReactionside to related.
// Adds o to related.R.Reactionparticipants.
func (o *Reactionparticipant) SetReactionparticipantReactionside(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reactionside) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactionparticipant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"reactionside"}),
		strmangle.WhereClause("\"", "\"", 0, reactionparticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Compound, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Reactionside, related.Accession)
	if o.R == nil {
		o.R = &reactionparticipantR{
			ReactionparticipantReactionside: related,
		}
	} else {
		o.R.ReactionparticipantReactionside = related
	}

	if related.R == nil {
		related.R = &reactionsideR{
			Reactionparticipants: ReactionparticipantSlice{o},
		}
	} else {
		related.R.Reactionparticipants = append(related.R.Reactionparticipants, o)
	}

	return nil
}

// SetReactionparticipantCompound of the reactionparticipant to the related item.
// Sets o.R.ReactionparticipantCompound to related.
// Adds o to related.R.Reactionparticipants.
func (o *Reactionparticipant) SetReactionparticipantCompound(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Compound) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactionparticipant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"compound"}),
		strmangle.WhereClause("\"", "\"", 0, reactionparticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Compound, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Compound, related.Accession)
	if o.R == nil {
		o.R = &reactionparticipantR{
			ReactionparticipantCompound: related,
		}
	} else {
		o.R.ReactionparticipantCompound = related
	}

	if related.R == nil {
		related.R = &compoundR{
			Reactionparticipants: ReactionparticipantSlice{o},
		}
	} else {
		related.R.Reactionparticipants = append(related.R.Reactionparticipants, o)
	}

	return nil
}

// RemoveReactionparticipantCompound relationship.
// Sets o.R.ReactionparticipantCompound to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Reactionparticipant) RemoveReactionparticipantCompound(ctx context.Context, exec boil.ContextExecutor, related *Compound) error {
	var err error

	queries.SetScanner(&o.Compound, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("compound")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReactionparticipantCompound = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Reactionparticipants {
		if queries.Equal(o.Compound, ri.Compound) {
			continue
		}

		ln := len(related.R.Reactionparticipants)
		if ln > 1 && i < ln-1 {
			related.R.Reactionparticipants[i] = related.R.Reactionparticipants[ln-1]
		}
		related.R.Reactionparticipants = related.R.Reactionparticipants[:ln-1]
		break
	}
	return nil
}

// Reactionparticipants retrieves all the records using an executor.
func Reactionparticipants(mods ...qm.QueryMod) reactionparticipantQuery {
	mods = append(mods, qm.From("\"reactionparticipant\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reactionparticipant\".*"})
	}

	return reactionparticipantQuery{q}
}

// FindReactionparticipant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReactionparticipant(ctx context.Context, exec boil.ContextExecutor, compound null.String, reactionside string, selectCols ...string) (*Reactionparticipant, error) {
	reactionparticipantObj := &Reactionparticipant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reactionparticipant\" where \"compound\"=? AND \"reactionside\"=?", sel,
	)

	q := queries.Raw(query, compound, reactionside)

	err := q.Bind(ctx, exec, reactionparticipantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reactionparticipant")
	}

	if err = reactionparticipantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionparticipantObj, err
	}

	return reactionparticipantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reactionparticipant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionparticipant provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionparticipantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionparticipantInsertCacheMut.RLock()
	cache, cached := reactionparticipantInsertCache[key]
	reactionparticipantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionparticipantAllColumns,
			reactionparticipantColumnsWithDefault,
			reactionparticipantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reactionparticipant\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reactionparticipant\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reactionparticipant")
	}

	if !cached {
		reactionparticipantInsertCacheMut.Lock()
		reactionparticipantInsertCache[key] = cache
		reactionparticipantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reactionparticipant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reactionparticipant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionparticipantUpdateCacheMut.RLock()
	cache, cached := reactionparticipantUpdateCache[key]
	reactionparticipantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionparticipantAllColumns,
			reactionparticipantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reactionparticipant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reactionparticipant\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactionparticipantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, append(wl, reactionparticipantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reactionparticipant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reactionparticipant")
	}

	if !cached {
		reactionparticipantUpdateCacheMut.Lock()
		reactionparticipantUpdateCache[key] = cache
		reactionparticipantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionparticipantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reactionparticipant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reactionparticipant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionparticipantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionparticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reactionparticipant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionparticipantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reactionparticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reactionparticipant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reactionparticipant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionparticipant provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionparticipantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionparticipantUpsertCacheMut.RLock()
	cache, cached := reactionparticipantUpsertCache[key]
	reactionparticipantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactionparticipantAllColumns,
			reactionparticipantColumnsWithDefault,
			reactionparticipantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactionparticipantAllColumns,
			reactionparticipantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reactionparticipant, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactionparticipantPrimaryKeyColumns))
			copy(conflict, reactionparticipantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reactionparticipant\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionparticipantType, reactionparticipantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reactionparticipant")
	}

	if !cached {
		reactionparticipantUpsertCacheMut.Lock()
		reactionparticipantUpsertCache[key] = cache
		reactionparticipantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reactionparticipant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reactionparticipant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reactionparticipant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionparticipantPrimaryKeyMapping)
	sql := "DELETE FROM \"reactionparticipant\" WHERE \"compound\"=? AND \"reactionside\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reactionparticipant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reactionparticipant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactionparticipantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionparticipantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionparticipant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionparticipant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionparticipantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionparticipantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionparticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reactionparticipant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionparticipantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionparticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionparticipant")
	}

	if len(reactionparticipantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reactionparticipant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReactionparticipant(ctx, exec, o.Compound, o.Reactionside)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionparticipantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionparticipantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionparticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reactionparticipant\".* FROM \"reactionparticipant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionparticipantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionparticipantSlice")
	}

	*o = slice

	return nil
}

// ReactionparticipantExists checks if the Reactionparticipant row exists.
func ReactionparticipantExists(ctx context.Context, exec boil.ContextExecutor, compound null.String, reactionside string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reactionparticipant\" where \"compound\"=? AND \"reactionside\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, compound, reactionside)
	}
	row := exec.QueryRowContext(ctx, sql, compound, reactionside)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reactionparticipant exists")
	}

	return exists, nil
}
