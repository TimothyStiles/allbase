// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Compound is an object representing the database table.
type Compound struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Accession           null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Position            null.String `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	Name                null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Htmlname            null.String `boil:"htmlname" json:"htmlname,omitempty" toml:"htmlname" yaml:"htmlname,omitempty"`
	Formula             null.String `boil:"formula" json:"formula,omitempty" toml:"formula" yaml:"formula,omitempty"`
	Charge              null.String `boil:"charge" json:"charge,omitempty" toml:"charge" yaml:"charge,omitempty"`
	Chebi               null.String `boil:"chebi" json:"chebi,omitempty" toml:"chebi" yaml:"chebi,omitempty"`
	Polymerizationindex null.String `boil:"polymerizationindex" json:"polymerizationindex,omitempty" toml:"polymerizationindex" yaml:"polymerizationindex,omitempty"`
	Compoundtype        string      `boil:"compoundtype" json:"compoundtype" toml:"compoundtype" yaml:"compoundtype"`

	R *compoundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L compoundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompoundColumns = struct {
	ID                  string
	Accession           string
	Position            string
	Name                string
	Htmlname            string
	Formula             string
	Charge              string
	Chebi               string
	Polymerizationindex string
	Compoundtype        string
}{
	ID:                  "id",
	Accession:           "accession",
	Position:            "position",
	Name:                "name",
	Htmlname:            "htmlname",
	Formula:             "formula",
	Charge:              "charge",
	Chebi:               "chebi",
	Polymerizationindex: "polymerizationindex",
	Compoundtype:        "compoundtype",
}

var CompoundTableColumns = struct {
	ID                  string
	Accession           string
	Position            string
	Name                string
	Htmlname            string
	Formula             string
	Charge              string
	Chebi               string
	Polymerizationindex string
	Compoundtype        string
}{
	ID:                  "compound.id",
	Accession:           "compound.accession",
	Position:            "compound.position",
	Name:                "compound.name",
	Htmlname:            "compound.htmlname",
	Formula:             "compound.formula",
	Charge:              "compound.charge",
	Chebi:               "compound.chebi",
	Polymerizationindex: "compound.polymerizationindex",
	Compoundtype:        "compound.compoundtype",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CompoundWhere = struct {
	ID                  whereHelperint64
	Accession           whereHelpernull_String
	Position            whereHelpernull_String
	Name                whereHelpernull_String
	Htmlname            whereHelpernull_String
	Formula             whereHelpernull_String
	Charge              whereHelpernull_String
	Chebi               whereHelpernull_String
	Polymerizationindex whereHelpernull_String
	Compoundtype        whereHelperstring
}{
	ID:                  whereHelperint64{field: "\"compound\".\"id\""},
	Accession:           whereHelpernull_String{field: "\"compound\".\"accession\""},
	Position:            whereHelpernull_String{field: "\"compound\".\"position\""},
	Name:                whereHelpernull_String{field: "\"compound\".\"name\""},
	Htmlname:            whereHelpernull_String{field: "\"compound\".\"htmlname\""},
	Formula:             whereHelpernull_String{field: "\"compound\".\"formula\""},
	Charge:              whereHelpernull_String{field: "\"compound\".\"charge\""},
	Chebi:               whereHelpernull_String{field: "\"compound\".\"chebi\""},
	Polymerizationindex: whereHelpernull_String{field: "\"compound\".\"polymerizationindex\""},
	Compoundtype:        whereHelperstring{field: "\"compound\".\"compoundtype\""},
}

// CompoundRels is where relationship names are stored.
var CompoundRels = struct {
	CompoundChebi        string
	Reactionparticipants string
	Reactiveparts        string
}{
	CompoundChebi:        "CompoundChebi",
	Reactionparticipants: "Reactionparticipants",
	Reactiveparts:        "Reactiveparts",
}

// compoundR is where relationships are stored.
type compoundR struct {
	CompoundChebi        *Chebi                   `boil:"CompoundChebi" json:"CompoundChebi" toml:"CompoundChebi" yaml:"CompoundChebi"`
	Reactionparticipants ReactionparticipantSlice `boil:"Reactionparticipants" json:"Reactionparticipants" toml:"Reactionparticipants" yaml:"Reactionparticipants"`
	Reactiveparts        ReactivepartSlice        `boil:"Reactiveparts" json:"Reactiveparts" toml:"Reactiveparts" yaml:"Reactiveparts"`
}

// NewStruct creates a new relationship struct
func (*compoundR) NewStruct() *compoundR {
	return &compoundR{}
}

func (r *compoundR) GetCompoundChebi() *Chebi {
	if r == nil {
		return nil
	}
	return r.CompoundChebi
}

func (r *compoundR) GetReactionparticipants() ReactionparticipantSlice {
	if r == nil {
		return nil
	}
	return r.Reactionparticipants
}

func (r *compoundR) GetReactiveparts() ReactivepartSlice {
	if r == nil {
		return nil
	}
	return r.Reactiveparts
}

// compoundL is where Load methods for each relationship are stored.
type compoundL struct{}

var (
	compoundAllColumns            = []string{"id", "accession", "position", "name", "htmlname", "formula", "charge", "chebi", "polymerizationindex", "compoundtype"}
	compoundColumnsWithoutDefault = []string{"id", "compoundtype"}
	compoundColumnsWithDefault    = []string{"accession", "position", "name", "htmlname", "formula", "charge", "chebi", "polymerizationindex"}
	compoundPrimaryKeyColumns     = []string{"accession"}
	compoundGeneratedColumns      = []string{}
)

type (
	// CompoundSlice is an alias for a slice of pointers to Compound.
	// This should almost always be used instead of []Compound.
	CompoundSlice []*Compound
	// CompoundHook is the signature for custom Compound hook methods
	CompoundHook func(context.Context, boil.ContextExecutor, *Compound) error

	compoundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	compoundType                 = reflect.TypeOf(&Compound{})
	compoundMapping              = queries.MakeStructMapping(compoundType)
	compoundPrimaryKeyMapping, _ = queries.BindMapping(compoundType, compoundMapping, compoundPrimaryKeyColumns)
	compoundInsertCacheMut       sync.RWMutex
	compoundInsertCache          = make(map[string]insertCache)
	compoundUpdateCacheMut       sync.RWMutex
	compoundUpdateCache          = make(map[string]updateCache)
	compoundUpsertCacheMut       sync.RWMutex
	compoundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var compoundAfterSelectHooks []CompoundHook

var compoundBeforeInsertHooks []CompoundHook
var compoundAfterInsertHooks []CompoundHook

var compoundBeforeUpdateHooks []CompoundHook
var compoundAfterUpdateHooks []CompoundHook

var compoundBeforeDeleteHooks []CompoundHook
var compoundAfterDeleteHooks []CompoundHook

var compoundBeforeUpsertHooks []CompoundHook
var compoundAfterUpsertHooks []CompoundHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Compound) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Compound) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Compound) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Compound) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Compound) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Compound) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Compound) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Compound) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Compound) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompoundHook registers your hook function for all future operations.
func AddCompoundHook(hookPoint boil.HookPoint, compoundHook CompoundHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		compoundAfterSelectHooks = append(compoundAfterSelectHooks, compoundHook)
	case boil.BeforeInsertHook:
		compoundBeforeInsertHooks = append(compoundBeforeInsertHooks, compoundHook)
	case boil.AfterInsertHook:
		compoundAfterInsertHooks = append(compoundAfterInsertHooks, compoundHook)
	case boil.BeforeUpdateHook:
		compoundBeforeUpdateHooks = append(compoundBeforeUpdateHooks, compoundHook)
	case boil.AfterUpdateHook:
		compoundAfterUpdateHooks = append(compoundAfterUpdateHooks, compoundHook)
	case boil.BeforeDeleteHook:
		compoundBeforeDeleteHooks = append(compoundBeforeDeleteHooks, compoundHook)
	case boil.AfterDeleteHook:
		compoundAfterDeleteHooks = append(compoundAfterDeleteHooks, compoundHook)
	case boil.BeforeUpsertHook:
		compoundBeforeUpsertHooks = append(compoundBeforeUpsertHooks, compoundHook)
	case boil.AfterUpsertHook:
		compoundAfterUpsertHooks = append(compoundAfterUpsertHooks, compoundHook)
	}
}

// One returns a single compound record from the query.
func (q compoundQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Compound, error) {
	o := &Compound{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for compound")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Compound records from the query.
func (q compoundQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompoundSlice, error) {
	var o []*Compound

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Compound slice")
	}

	if len(compoundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Compound records in the query.
func (q compoundQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count compound rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q compoundQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if compound exists")
	}

	return count > 0, nil
}

// CompoundChebi pointed to by the foreign key.
func (o *Compound) CompoundChebi(mods ...qm.QueryMod) chebiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Chebi),
	}

	queryMods = append(queryMods, mods...)

	return Chebis(queryMods...)
}

// Reactionparticipants retrieves all the reactionparticipant's Reactionparticipants with an executor.
func (o *Compound) Reactionparticipants(mods ...qm.QueryMod) reactionparticipantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactionparticipant\".\"compound\"=?", o.Accession),
	)

	return Reactionparticipants(queryMods...)
}

// Reactiveparts retrieves all the reactivepart's Reactiveparts with an executor.
func (o *Compound) Reactiveparts(mods ...qm.QueryMod) reactivepartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactivepart\".\"compound\"=?", o.Accession),
	)

	return Reactiveparts(queryMods...)
}

// LoadCompoundChebi allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundL) LoadCompoundChebi(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompound interface{}, mods queries.Applicator) error {
	var slice []*Compound
	var object *Compound

	if singular {
		object = maybeCompound.(*Compound)
	} else {
		slice = *maybeCompound.(*[]*Compound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundR{}
		}
		if !queries.IsNil(object.Chebi) {
			args = append(args, object.Chebi)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Chebi) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Chebi) {
				args = append(args, obj.Chebi)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chebi`),
		qm.WhereIn(`chebi.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chebi")
	}

	var resultSlice []*Chebi
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chebi")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chebi")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chebi")
	}

	if len(compoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CompoundChebi = foreign
		if foreign.R == nil {
			foreign.R = &chebiR{}
		}
		foreign.R.Compounds = append(foreign.R.Compounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Chebi, foreign.Accession) {
				local.R.CompoundChebi = foreign
				if foreign.R == nil {
					foreign.R = &chebiR{}
				}
				foreign.R.Compounds = append(foreign.R.Compounds, local)
				break
			}
		}
	}

	return nil
}

// LoadReactionparticipants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundL) LoadReactionparticipants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompound interface{}, mods queries.Applicator) error {
	var slice []*Compound
	var object *Compound

	if singular {
		object = maybeCompound.(*Compound)
	} else {
		slice = *maybeCompound.(*[]*Compound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionparticipant`),
		qm.WhereIn(`reactionparticipant.compound in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactionparticipant")
	}

	var resultSlice []*Reactionparticipant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactionparticipant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactionparticipant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionparticipant")
	}

	if len(reactionparticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reactionparticipants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionparticipantR{}
			}
			foreign.R.ReactionparticipantCompound = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Compound) {
				local.R.Reactionparticipants = append(local.R.Reactionparticipants, foreign)
				if foreign.R == nil {
					foreign.R = &reactionparticipantR{}
				}
				foreign.R.ReactionparticipantCompound = local
				break
			}
		}
	}

	return nil
}

// LoadReactiveparts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundL) LoadReactiveparts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompound interface{}, mods queries.Applicator) error {
	var slice []*Compound
	var object *Compound

	if singular {
		object = maybeCompound.(*Compound)
	} else {
		slice = *maybeCompound.(*[]*Compound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactivepart`),
		qm.WhereIn(`reactivepart.compound in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactivepart")
	}

	var resultSlice []*Reactivepart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactivepart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactivepart")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactivepart")
	}

	if len(reactivepartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reactiveparts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactivepartR{}
			}
			foreign.R.ReactivepartCompound = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Compound) {
				local.R.Reactiveparts = append(local.R.Reactiveparts, foreign)
				if foreign.R == nil {
					foreign.R = &reactivepartR{}
				}
				foreign.R.ReactivepartCompound = local
				break
			}
		}
	}

	return nil
}

// SetCompoundChebi of the compound to the related item.
// Sets o.R.CompoundChebi to related.
// Adds o to related.R.Compounds.
func (o *Compound) SetCompoundChebi(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chebi) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chebi"}),
		strmangle.WhereClause("\"", "\"", 0, compoundPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Accession}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Chebi, related.Accession)
	if o.R == nil {
		o.R = &compoundR{
			CompoundChebi: related,
		}
	} else {
		o.R.CompoundChebi = related
	}

	if related.R == nil {
		related.R = &chebiR{
			Compounds: CompoundSlice{o},
		}
	} else {
		related.R.Compounds = append(related.R.Compounds, o)
	}

	return nil
}

// RemoveCompoundChebi relationship.
// Sets o.R.CompoundChebi to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Compound) RemoveCompoundChebi(ctx context.Context, exec boil.ContextExecutor, related *Chebi) error {
	var err error

	queries.SetScanner(&o.Chebi, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("chebi")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CompoundChebi = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Compounds {
		if queries.Equal(o.Chebi, ri.Chebi) {
			continue
		}

		ln := len(related.R.Compounds)
		if ln > 1 && i < ln-1 {
			related.R.Compounds[i] = related.R.Compounds[ln-1]
		}
		related.R.Compounds = related.R.Compounds[:ln-1]
		break
	}
	return nil
}

// AddReactionparticipants adds the given related objects to the existing relationships
// of the compound, optionally inserting them as new records.
// Appends related to o.R.Reactionparticipants.
// Sets related.R.ReactionparticipantCompound appropriately.
func (o *Compound) AddReactionparticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reactionparticipant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Compound, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactionparticipant\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"compound"}),
				strmangle.WhereClause("\"", "\"", 0, reactionparticipantPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Compound, rel.Reactionside}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Compound, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &compoundR{
			Reactionparticipants: related,
		}
	} else {
		o.R.Reactionparticipants = append(o.R.Reactionparticipants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionparticipantR{
				ReactionparticipantCompound: o,
			}
		} else {
			rel.R.ReactionparticipantCompound = o
		}
	}
	return nil
}

// SetReactionparticipants removes all previously related items of the
// compound replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReactionparticipantCompound's Reactionparticipants accordingly.
// Replaces o.R.Reactionparticipants with related.
// Sets related.R.ReactionparticipantCompound's Reactionparticipants accordingly.
func (o *Compound) SetReactionparticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reactionparticipant) error {
	query := "update \"reactionparticipant\" set \"compound\" = null where \"compound\" = ?"
	values := []interface{}{o.Accession}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Reactionparticipants {
			queries.SetScanner(&rel.Compound, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReactionparticipantCompound = nil
		}
		o.R.Reactionparticipants = nil
	}

	return o.AddReactionparticipants(ctx, exec, insert, related...)
}

// RemoveReactionparticipants relationships from objects passed in.
// Removes related items from R.Reactionparticipants (uses pointer comparison, removal does not keep order)
// Sets related.R.ReactionparticipantCompound.
func (o *Compound) RemoveReactionparticipants(ctx context.Context, exec boil.ContextExecutor, related ...*Reactionparticipant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Compound, nil)
		if rel.R != nil {
			rel.R.ReactionparticipantCompound = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("compound")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Reactionparticipants {
			if rel != ri {
				continue
			}

			ln := len(o.R.Reactionparticipants)
			if ln > 1 && i < ln-1 {
				o.R.Reactionparticipants[i] = o.R.Reactionparticipants[ln-1]
			}
			o.R.Reactionparticipants = o.R.Reactionparticipants[:ln-1]
			break
		}
	}

	return nil
}

// AddReactiveparts adds the given related objects to the existing relationships
// of the compound, optionally inserting them as new records.
// Appends related to o.R.Reactiveparts.
// Sets related.R.ReactivepartCompound appropriately.
func (o *Compound) AddReactiveparts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reactivepart) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Compound, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactivepart\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"compound"}),
				strmangle.WhereClause("\"", "\"", 0, reactivepartPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Accession}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Compound, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &compoundR{
			Reactiveparts: related,
		}
	} else {
		o.R.Reactiveparts = append(o.R.Reactiveparts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactivepartR{
				ReactivepartCompound: o,
			}
		} else {
			rel.R.ReactivepartCompound = o
		}
	}
	return nil
}

// Compounds retrieves all the records using an executor.
func Compounds(mods ...qm.QueryMod) compoundQuery {
	mods = append(mods, qm.From("\"compound\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"compound\".*"})
	}

	return compoundQuery{q}
}

// FindCompound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompound(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*Compound, error) {
	compoundObj := &Compound{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"compound\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, compoundObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from compound")
	}

	if err = compoundObj.doAfterSelectHooks(ctx, exec); err != nil {
		return compoundObj, err
	}

	return compoundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Compound) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	compoundInsertCacheMut.RLock()
	cache, cached := compoundInsertCache[key]
	compoundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			compoundAllColumns,
			compoundColumnsWithDefault,
			compoundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(compoundType, compoundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(compoundType, compoundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"compound\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"compound\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into compound")
	}

	if !cached {
		compoundInsertCacheMut.Lock()
		compoundInsertCache[key] = cache
		compoundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Compound.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Compound) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	compoundUpdateCacheMut.RLock()
	cache, cached := compoundUpdateCache[key]
	compoundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			compoundAllColumns,
			compoundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update compound, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"compound\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, compoundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(compoundType, compoundMapping, append(wl, compoundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update compound row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for compound")
	}

	if !cached {
		compoundUpdateCacheMut.Lock()
		compoundUpdateCache[key] = cache
		compoundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q compoundQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for compound")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for compound")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompoundSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"compound\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in compound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all compound")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Compound) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	compoundUpsertCacheMut.RLock()
	cache, cached := compoundUpsertCache[key]
	compoundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			compoundAllColumns,
			compoundColumnsWithDefault,
			compoundColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			compoundAllColumns,
			compoundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert compound, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(compoundPrimaryKeyColumns))
			copy(conflict, compoundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"compound\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(compoundType, compoundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(compoundType, compoundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert compound")
	}

	if !cached {
		compoundUpsertCacheMut.Lock()
		compoundUpsertCache[key] = cache
		compoundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Compound record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Compound) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Compound provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), compoundPrimaryKeyMapping)
	sql := "DELETE FROM \"compound\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from compound")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for compound")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q compoundQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no compoundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compound")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompoundSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(compoundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"compound\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound")
	}

	if len(compoundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Compound) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompound(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompoundSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"compound\".* FROM \"compound\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompoundSlice")
	}

	*o = slice

	return nil
}

// CompoundExists checks if the Compound row exists.
func CompoundExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"compound\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if compound exists")
	}

	return exists, nil
}
