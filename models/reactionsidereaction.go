// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reactionsidereaction is an object representing the database table.
type Reactionsidereaction struct {
	Reaction                 string `boil:"reaction" json:"reaction" toml:"reaction" yaml:"reaction"`
	Reactionside             string `boil:"reactionside" json:"reactionside" toml:"reactionside" yaml:"reactionside"`
	Reactionsidereactiontype string `boil:"reactionsidereactiontype" json:"reactionsidereactiontype" toml:"reactionsidereactiontype" yaml:"reactionsidereactiontype"`

	R *reactionsidereactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionsidereactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionsidereactionColumns = struct {
	Reaction                 string
	Reactionside             string
	Reactionsidereactiontype string
}{
	Reaction:                 "reaction",
	Reactionside:             "reactionside",
	Reactionsidereactiontype: "reactionsidereactiontype",
}

var ReactionsidereactionTableColumns = struct {
	Reaction                 string
	Reactionside             string
	Reactionsidereactiontype string
}{
	Reaction:                 "reactionsidereaction.reaction",
	Reactionside:             "reactionsidereaction.reactionside",
	Reactionsidereactiontype: "reactionsidereaction.reactionsidereactiontype",
}

// Generated where

var ReactionsidereactionWhere = struct {
	Reaction                 whereHelperstring
	Reactionside             whereHelperstring
	Reactionsidereactiontype whereHelperstring
}{
	Reaction:                 whereHelperstring{field: "\"reactionsidereaction\".\"reaction\""},
	Reactionside:             whereHelperstring{field: "\"reactionsidereaction\".\"reactionside\""},
	Reactionsidereactiontype: whereHelperstring{field: "\"reactionsidereaction\".\"reactionsidereactiontype\""},
}

// ReactionsidereactionRels is where relationship names are stored.
var ReactionsidereactionRels = struct {
	ReactionsidereactionReactionside string
	ReactionsidereactionReaction     string
}{
	ReactionsidereactionReactionside: "ReactionsidereactionReactionside",
	ReactionsidereactionReaction:     "ReactionsidereactionReaction",
}

// reactionsidereactionR is where relationships are stored.
type reactionsidereactionR struct {
	ReactionsidereactionReactionside *Reactionside `boil:"ReactionsidereactionReactionside" json:"ReactionsidereactionReactionside" toml:"ReactionsidereactionReactionside" yaml:"ReactionsidereactionReactionside"`
	ReactionsidereactionReaction     *Reaction     `boil:"ReactionsidereactionReaction" json:"ReactionsidereactionReaction" toml:"ReactionsidereactionReaction" yaml:"ReactionsidereactionReaction"`
}

// NewStruct creates a new relationship struct
func (*reactionsidereactionR) NewStruct() *reactionsidereactionR {
	return &reactionsidereactionR{}
}

func (r *reactionsidereactionR) GetReactionsidereactionReactionside() *Reactionside {
	if r == nil {
		return nil
	}
	return r.ReactionsidereactionReactionside
}

func (r *reactionsidereactionR) GetReactionsidereactionReaction() *Reaction {
	if r == nil {
		return nil
	}
	return r.ReactionsidereactionReaction
}

// reactionsidereactionL is where Load methods for each relationship are stored.
type reactionsidereactionL struct{}

var (
	reactionsidereactionAllColumns            = []string{"reaction", "reactionside", "reactionsidereactiontype"}
	reactionsidereactionColumnsWithoutDefault = []string{"reaction", "reactionside", "reactionsidereactiontype"}
	reactionsidereactionColumnsWithDefault    = []string{}
	reactionsidereactionPrimaryKeyColumns     = []string{"reaction", "reactionside"}
	reactionsidereactionGeneratedColumns      = []string{}
)

type (
	// ReactionsidereactionSlice is an alias for a slice of pointers to Reactionsidereaction.
	// This should almost always be used instead of []Reactionsidereaction.
	ReactionsidereactionSlice []*Reactionsidereaction
	// ReactionsidereactionHook is the signature for custom Reactionsidereaction hook methods
	ReactionsidereactionHook func(context.Context, boil.ContextExecutor, *Reactionsidereaction) error

	reactionsidereactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionsidereactionType                 = reflect.TypeOf(&Reactionsidereaction{})
	reactionsidereactionMapping              = queries.MakeStructMapping(reactionsidereactionType)
	reactionsidereactionPrimaryKeyMapping, _ = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, reactionsidereactionPrimaryKeyColumns)
	reactionsidereactionInsertCacheMut       sync.RWMutex
	reactionsidereactionInsertCache          = make(map[string]insertCache)
	reactionsidereactionUpdateCacheMut       sync.RWMutex
	reactionsidereactionUpdateCache          = make(map[string]updateCache)
	reactionsidereactionUpsertCacheMut       sync.RWMutex
	reactionsidereactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionsidereactionAfterSelectHooks []ReactionsidereactionHook

var reactionsidereactionBeforeInsertHooks []ReactionsidereactionHook
var reactionsidereactionAfterInsertHooks []ReactionsidereactionHook

var reactionsidereactionBeforeUpdateHooks []ReactionsidereactionHook
var reactionsidereactionAfterUpdateHooks []ReactionsidereactionHook

var reactionsidereactionBeforeDeleteHooks []ReactionsidereactionHook
var reactionsidereactionAfterDeleteHooks []ReactionsidereactionHook

var reactionsidereactionBeforeUpsertHooks []ReactionsidereactionHook
var reactionsidereactionAfterUpsertHooks []ReactionsidereactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reactionsidereaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reactionsidereaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reactionsidereaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reactionsidereaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reactionsidereaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reactionsidereaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reactionsidereaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reactionsidereaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reactionsidereaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsidereactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionsidereactionHook registers your hook function for all future operations.
func AddReactionsidereactionHook(hookPoint boil.HookPoint, reactionsidereactionHook ReactionsidereactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionsidereactionAfterSelectHooks = append(reactionsidereactionAfterSelectHooks, reactionsidereactionHook)
	case boil.BeforeInsertHook:
		reactionsidereactionBeforeInsertHooks = append(reactionsidereactionBeforeInsertHooks, reactionsidereactionHook)
	case boil.AfterInsertHook:
		reactionsidereactionAfterInsertHooks = append(reactionsidereactionAfterInsertHooks, reactionsidereactionHook)
	case boil.BeforeUpdateHook:
		reactionsidereactionBeforeUpdateHooks = append(reactionsidereactionBeforeUpdateHooks, reactionsidereactionHook)
	case boil.AfterUpdateHook:
		reactionsidereactionAfterUpdateHooks = append(reactionsidereactionAfterUpdateHooks, reactionsidereactionHook)
	case boil.BeforeDeleteHook:
		reactionsidereactionBeforeDeleteHooks = append(reactionsidereactionBeforeDeleteHooks, reactionsidereactionHook)
	case boil.AfterDeleteHook:
		reactionsidereactionAfterDeleteHooks = append(reactionsidereactionAfterDeleteHooks, reactionsidereactionHook)
	case boil.BeforeUpsertHook:
		reactionsidereactionBeforeUpsertHooks = append(reactionsidereactionBeforeUpsertHooks, reactionsidereactionHook)
	case boil.AfterUpsertHook:
		reactionsidereactionAfterUpsertHooks = append(reactionsidereactionAfterUpsertHooks, reactionsidereactionHook)
	}
}

// One returns a single reactionsidereaction record from the query.
func (q reactionsidereactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reactionsidereaction, error) {
	o := &Reactionsidereaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reactionsidereaction")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reactionsidereaction records from the query.
func (q reactionsidereactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionsidereactionSlice, error) {
	var o []*Reactionsidereaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reactionsidereaction slice")
	}

	if len(reactionsidereactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reactionsidereaction records in the query.
func (q reactionsidereactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reactionsidereaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactionsidereactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reactionsidereaction exists")
	}

	return count > 0, nil
}

// ReactionsidereactionReactionside pointed to by the foreign key.
func (o *Reactionsidereaction) ReactionsidereactionReactionside(mods ...qm.QueryMod) reactionsideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Reactionside),
	}

	queryMods = append(queryMods, mods...)

	return Reactionsides(queryMods...)
}

// ReactionsidereactionReaction pointed to by the foreign key.
func (o *Reactionsidereaction) ReactionsidereactionReaction(mods ...qm.QueryMod) reactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Reaction),
	}

	queryMods = append(queryMods, mods...)

	return Reactions(queryMods...)
}

// LoadReactionsidereactionReactionside allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionsidereactionL) LoadReactionsidereactionReactionside(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionsidereaction interface{}, mods queries.Applicator) error {
	var slice []*Reactionsidereaction
	var object *Reactionsidereaction

	if singular {
		object = maybeReactionsidereaction.(*Reactionsidereaction)
	} else {
		slice = *maybeReactionsidereaction.(*[]*Reactionsidereaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionsidereactionR{}
		}
		if !queries.IsNil(object.Reactionside) {
			args = append(args, object.Reactionside)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionsidereactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Reactionside) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Reactionside) {
				args = append(args, obj.Reactionside)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionside`),
		qm.WhereIn(`reactionside.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reactionside")
	}

	var resultSlice []*Reactionside
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reactionside")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reactionside")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionside")
	}

	if len(reactionsidereactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionsidereactionReactionside = foreign
		if foreign.R == nil {
			foreign.R = &reactionsideR{}
		}
		foreign.R.Reactionsidereactions = append(foreign.R.Reactionsidereactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Reactionside, foreign.Accession) {
				local.R.ReactionsidereactionReactionside = foreign
				if foreign.R == nil {
					foreign.R = &reactionsideR{}
				}
				foreign.R.Reactionsidereactions = append(foreign.R.Reactionsidereactions, local)
				break
			}
		}
	}

	return nil
}

// LoadReactionsidereactionReaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionsidereactionL) LoadReactionsidereactionReaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionsidereaction interface{}, mods queries.Applicator) error {
	var slice []*Reactionsidereaction
	var object *Reactionsidereaction

	if singular {
		object = maybeReactionsidereaction.(*Reactionsidereaction)
	} else {
		slice = *maybeReactionsidereaction.(*[]*Reactionsidereaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionsidereactionR{}
		}
		if !queries.IsNil(object.Reaction) {
			args = append(args, object.Reaction)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionsidereactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Reaction) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Reaction) {
				args = append(args, obj.Reaction)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reaction`),
		qm.WhereIn(`reaction.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reaction")
	}

	var resultSlice []*Reaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reaction")
	}

	if len(reactionsidereactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionsidereactionReaction = foreign
		if foreign.R == nil {
			foreign.R = &reactionR{}
		}
		foreign.R.Reactionsidereactions = append(foreign.R.Reactionsidereactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Reaction, foreign.Accession) {
				local.R.ReactionsidereactionReaction = foreign
				if foreign.R == nil {
					foreign.R = &reactionR{}
				}
				foreign.R.Reactionsidereactions = append(foreign.R.Reactionsidereactions, local)
				break
			}
		}
	}

	return nil
}

// SetReactionsidereactionReactionside of the reactionsidereaction to the related item.
// Sets o.R.ReactionsidereactionReactionside to related.
// Adds o to related.R.Reactionsidereactions.
func (o *Reactionsidereaction) SetReactionsidereactionReactionside(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reactionside) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactionsidereaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"reactionside"}),
		strmangle.WhereClause("\"", "\"", 0, reactionsidereactionPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Reaction, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Reactionside, related.Accession)
	if o.R == nil {
		o.R = &reactionsidereactionR{
			ReactionsidereactionReactionside: related,
		}
	} else {
		o.R.ReactionsidereactionReactionside = related
	}

	if related.R == nil {
		related.R = &reactionsideR{
			Reactionsidereactions: ReactionsidereactionSlice{o},
		}
	} else {
		related.R.Reactionsidereactions = append(related.R.Reactionsidereactions, o)
	}

	return nil
}

// SetReactionsidereactionReaction of the reactionsidereaction to the related item.
// Sets o.R.ReactionsidereactionReaction to related.
// Adds o to related.R.Reactionsidereactions.
func (o *Reactionsidereaction) SetReactionsidereactionReaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactionsidereaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"reaction"}),
		strmangle.WhereClause("\"", "\"", 0, reactionsidereactionPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Reaction, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Reaction, related.Accession)
	if o.R == nil {
		o.R = &reactionsidereactionR{
			ReactionsidereactionReaction: related,
		}
	} else {
		o.R.ReactionsidereactionReaction = related
	}

	if related.R == nil {
		related.R = &reactionR{
			Reactionsidereactions: ReactionsidereactionSlice{o},
		}
	} else {
		related.R.Reactionsidereactions = append(related.R.Reactionsidereactions, o)
	}

	return nil
}

// Reactionsidereactions retrieves all the records using an executor.
func Reactionsidereactions(mods ...qm.QueryMod) reactionsidereactionQuery {
	mods = append(mods, qm.From("\"reactionsidereaction\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reactionsidereaction\".*"})
	}

	return reactionsidereactionQuery{q}
}

// FindReactionsidereaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReactionsidereaction(ctx context.Context, exec boil.ContextExecutor, reaction string, reactionside string, selectCols ...string) (*Reactionsidereaction, error) {
	reactionsidereactionObj := &Reactionsidereaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reactionsidereaction\" where \"reaction\"=? AND \"reactionside\"=?", sel,
	)

	q := queries.Raw(query, reaction, reactionside)

	err := q.Bind(ctx, exec, reactionsidereactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reactionsidereaction")
	}

	if err = reactionsidereactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionsidereactionObj, err
	}

	return reactionsidereactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reactionsidereaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionsidereaction provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionsidereactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionsidereactionInsertCacheMut.RLock()
	cache, cached := reactionsidereactionInsertCache[key]
	reactionsidereactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionsidereactionAllColumns,
			reactionsidereactionColumnsWithDefault,
			reactionsidereactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reactionsidereaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reactionsidereaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reactionsidereaction")
	}

	if !cached {
		reactionsidereactionInsertCacheMut.Lock()
		reactionsidereactionInsertCache[key] = cache
		reactionsidereactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reactionsidereaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reactionsidereaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionsidereactionUpdateCacheMut.RLock()
	cache, cached := reactionsidereactionUpdateCache[key]
	reactionsidereactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionsidereactionAllColumns,
			reactionsidereactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reactionsidereaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reactionsidereaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactionsidereactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, append(wl, reactionsidereactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reactionsidereaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reactionsidereaction")
	}

	if !cached {
		reactionsidereactionUpdateCacheMut.Lock()
		reactionsidereactionUpdateCache[key] = cache
		reactionsidereactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionsidereactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reactionsidereaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reactionsidereaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionsidereactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidereactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reactionsidereaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidereactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reactionsidereaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reactionsidereaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reactionsidereaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionsidereaction provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionsidereactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionsidereactionUpsertCacheMut.RLock()
	cache, cached := reactionsidereactionUpsertCache[key]
	reactionsidereactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactionsidereactionAllColumns,
			reactionsidereactionColumnsWithDefault,
			reactionsidereactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactionsidereactionAllColumns,
			reactionsidereactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reactionsidereaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactionsidereactionPrimaryKeyColumns))
			copy(conflict, reactionsidereactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reactionsidereaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionsidereactionType, reactionsidereactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reactionsidereaction")
	}

	if !cached {
		reactionsidereactionUpsertCacheMut.Lock()
		reactionsidereactionUpsertCache[key] = cache
		reactionsidereactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reactionsidereaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reactionsidereaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reactionsidereaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionsidereactionPrimaryKeyMapping)
	sql := "DELETE FROM \"reactionsidereaction\" WHERE \"reaction\"=? AND \"reactionside\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reactionsidereaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reactionsidereaction")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactionsidereactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionsidereactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionsidereaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionsidereaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionsidereactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionsidereactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidereactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reactionsidereaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidereactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionsidereaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionsidereaction")
	}

	if len(reactionsidereactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reactionsidereaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReactionsidereaction(ctx, exec, o.Reaction, o.Reactionside)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionsidereactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionsidereactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidereactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reactionsidereaction\".* FROM \"reactionsidereaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidereactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionsidereactionSlice")
	}

	*o = slice

	return nil
}

// ReactionsidereactionExists checks if the Reactionsidereaction row exists.
func ReactionsidereactionExists(ctx context.Context, exec boil.ContextExecutor, reaction string, reactionside string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reactionsidereaction\" where \"reaction\"=? AND \"reactionside\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, reaction, reactionside)
	}
	row := exec.QueryRowContext(ctx, sql, reaction, reactionside)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reactionsidereaction exists")
	}

	return exists, nil
}
